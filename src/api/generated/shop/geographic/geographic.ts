/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * ShopDjango API
 * API for ShopDjango project
 * OpenAPI spec version: 1.0.0
 */
import {
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  Country,
  GeographicCountriesListParams,
  PaginatedCountryListList
} from '.././schemas';

import { shopInstance } from '../../../shop-mutator';




export const geographicCountriesList = (
    params?: GeographicCountriesListParams,
 signal?: AbortSignal
) => {
      
      
      return shopInstance<PaginatedCountryListList>(
      {url: `/api/geographic/countries/`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGeographicCountriesListQueryKey = (params?: GeographicCountriesListParams,) => {
    return [`/api/geographic/countries/`, ...(params ? [params]: [])] as const;
    }

    
export const getGeographicCountriesListQueryOptions = <TData = Awaited<ReturnType<typeof geographicCountriesList>>, TError = unknown>(params?: GeographicCountriesListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof geographicCountriesList>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGeographicCountriesListQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof geographicCountriesList>>> = ({ signal }) => geographicCountriesList(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof geographicCountriesList>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GeographicCountriesListQueryResult = NonNullable<Awaited<ReturnType<typeof geographicCountriesList>>>
export type GeographicCountriesListQueryError = unknown


export function useGeographicCountriesList<TData = Awaited<ReturnType<typeof geographicCountriesList>>, TError = unknown>(
 params: undefined |  GeographicCountriesListParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof geographicCountriesList>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof geographicCountriesList>>,
          TError,
          Awaited<ReturnType<typeof geographicCountriesList>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGeographicCountriesList<TData = Awaited<ReturnType<typeof geographicCountriesList>>, TError = unknown>(
 params?: GeographicCountriesListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof geographicCountriesList>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof geographicCountriesList>>,
          TError,
          Awaited<ReturnType<typeof geographicCountriesList>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGeographicCountriesList<TData = Awaited<ReturnType<typeof geographicCountriesList>>, TError = unknown>(
 params?: GeographicCountriesListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof geographicCountriesList>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGeographicCountriesList<TData = Awaited<ReturnType<typeof geographicCountriesList>>, TError = unknown>(
 params?: GeographicCountriesListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof geographicCountriesList>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGeographicCountriesListQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const geographicCountriesRetrieve = (
    id: number,
 signal?: AbortSignal
) => {
      
      
      return shopInstance<Country>(
      {url: `/api/geographic/countries/${id}/`, method: 'GET', signal
    },
      );
    }
  

export const getGeographicCountriesRetrieveQueryKey = (id: number,) => {
    return [`/api/geographic/countries/${id}/`] as const;
    }

    
export const getGeographicCountriesRetrieveQueryOptions = <TData = Awaited<ReturnType<typeof geographicCountriesRetrieve>>, TError = unknown>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof geographicCountriesRetrieve>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGeographicCountriesRetrieveQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof geographicCountriesRetrieve>>> = ({ signal }) => geographicCountriesRetrieve(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof geographicCountriesRetrieve>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GeographicCountriesRetrieveQueryResult = NonNullable<Awaited<ReturnType<typeof geographicCountriesRetrieve>>>
export type GeographicCountriesRetrieveQueryError = unknown


export function useGeographicCountriesRetrieve<TData = Awaited<ReturnType<typeof geographicCountriesRetrieve>>, TError = unknown>(
 id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof geographicCountriesRetrieve>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof geographicCountriesRetrieve>>,
          TError,
          Awaited<ReturnType<typeof geographicCountriesRetrieve>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGeographicCountriesRetrieve<TData = Awaited<ReturnType<typeof geographicCountriesRetrieve>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof geographicCountriesRetrieve>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof geographicCountriesRetrieve>>,
          TError,
          Awaited<ReturnType<typeof geographicCountriesRetrieve>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGeographicCountriesRetrieve<TData = Awaited<ReturnType<typeof geographicCountriesRetrieve>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof geographicCountriesRetrieve>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGeographicCountriesRetrieve<TData = Awaited<ReturnType<typeof geographicCountriesRetrieve>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof geographicCountriesRetrieve>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGeographicCountriesRetrieveQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Get country by code.
 */
export const geographicCountriesByCodeRetrieve = (
    
 signal?: AbortSignal
) => {
      
      
      return shopInstance<Country>(
      {url: `/api/geographic/countries/by_code/`, method: 'GET', signal
    },
      );
    }
  

export const getGeographicCountriesByCodeRetrieveQueryKey = () => {
    return [`/api/geographic/countries/by_code/`] as const;
    }

    
export const getGeographicCountriesByCodeRetrieveQueryOptions = <TData = Awaited<ReturnType<typeof geographicCountriesByCodeRetrieve>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof geographicCountriesByCodeRetrieve>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGeographicCountriesByCodeRetrieveQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof geographicCountriesByCodeRetrieve>>> = ({ signal }) => geographicCountriesByCodeRetrieve(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof geographicCountriesByCodeRetrieve>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GeographicCountriesByCodeRetrieveQueryResult = NonNullable<Awaited<ReturnType<typeof geographicCountriesByCodeRetrieve>>>
export type GeographicCountriesByCodeRetrieveQueryError = unknown


export function useGeographicCountriesByCodeRetrieve<TData = Awaited<ReturnType<typeof geographicCountriesByCodeRetrieve>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof geographicCountriesByCodeRetrieve>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof geographicCountriesByCodeRetrieve>>,
          TError,
          Awaited<ReturnType<typeof geographicCountriesByCodeRetrieve>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGeographicCountriesByCodeRetrieve<TData = Awaited<ReturnType<typeof geographicCountriesByCodeRetrieve>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof geographicCountriesByCodeRetrieve>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof geographicCountriesByCodeRetrieve>>,
          TError,
          Awaited<ReturnType<typeof geographicCountriesByCodeRetrieve>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGeographicCountriesByCodeRetrieve<TData = Awaited<ReturnType<typeof geographicCountriesByCodeRetrieve>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof geographicCountriesByCodeRetrieve>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGeographicCountriesByCodeRetrieve<TData = Awaited<ReturnType<typeof geographicCountriesByCodeRetrieve>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof geographicCountriesByCodeRetrieve>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGeographicCountriesByCodeRetrieveQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Search countries by name or code.
 */
export const geographicCountriesSearchRetrieve = (
    
 signal?: AbortSignal
) => {
      
      
      return shopInstance<Country>(
      {url: `/api/geographic/countries/search/`, method: 'GET', signal
    },
      );
    }
  

export const getGeographicCountriesSearchRetrieveQueryKey = () => {
    return [`/api/geographic/countries/search/`] as const;
    }

    
export const getGeographicCountriesSearchRetrieveQueryOptions = <TData = Awaited<ReturnType<typeof geographicCountriesSearchRetrieve>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof geographicCountriesSearchRetrieve>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGeographicCountriesSearchRetrieveQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof geographicCountriesSearchRetrieve>>> = ({ signal }) => geographicCountriesSearchRetrieve(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof geographicCountriesSearchRetrieve>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GeographicCountriesSearchRetrieveQueryResult = NonNullable<Awaited<ReturnType<typeof geographicCountriesSearchRetrieve>>>
export type GeographicCountriesSearchRetrieveQueryError = unknown


export function useGeographicCountriesSearchRetrieve<TData = Awaited<ReturnType<typeof geographicCountriesSearchRetrieve>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof geographicCountriesSearchRetrieve>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof geographicCountriesSearchRetrieve>>,
          TError,
          Awaited<ReturnType<typeof geographicCountriesSearchRetrieve>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGeographicCountriesSearchRetrieve<TData = Awaited<ReturnType<typeof geographicCountriesSearchRetrieve>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof geographicCountriesSearchRetrieve>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof geographicCountriesSearchRetrieve>>,
          TError,
          Awaited<ReturnType<typeof geographicCountriesSearchRetrieve>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGeographicCountriesSearchRetrieve<TData = Awaited<ReturnType<typeof geographicCountriesSearchRetrieve>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof geographicCountriesSearchRetrieve>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGeographicCountriesSearchRetrieve<TData = Awaited<ReturnType<typeof geographicCountriesSearchRetrieve>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof geographicCountriesSearchRetrieve>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGeographicCountriesSearchRetrieveQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



