/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * ShopDjango API
 * API for ShopDjango project
 * OpenAPI spec version: 1.0.0
 */
import {
  z as zod
} from 'zod';


export const geographicCountriesListParams = zod.object({
  "id": zod.coerce.number()
})

export const geographicCountriesListQueryParams = zod.object({
  "page": zod.coerce.number().optional().describe('A page number within the paginated result set.'),
  "page_size": zod.coerce.number().optional().describe('Number of results to return per page.')
})

export const geographicCountriesListResponseResultsItemCodeMax = 2;
export const geographicCountriesListResponseResultsItemNameMax = 100;


export const geographicCountriesListResponse = zod.object({
  "count": zod.number(),
  "next": zod.string().url().nullish(),
  "previous": zod.string().url().nullish(),
  "results": zod.array(zod.object({
  "id": zod.number(),
  "code": zod.string().max(geographicCountriesListResponseResultsItemCodeMax).describe('alpha-2 country code (e.g., PL, US, GB)'),
  "name": zod.string().max(geographicCountriesListResponseResultsItemNameMax).describe('Official country name in English')
}).describe('Simplified country serializer for list views.'))
})

export const geographicCountriesRetrieveParams = zod.object({
  "id": zod.coerce.number()
})

export const geographicCountriesRetrieveResponseCodeMax = 2;
export const geographicCountriesRetrieveResponseNameMax = 100;


export const geographicCountriesRetrieveResponse = zod.object({
  "id": zod.number(),
  "code": zod.string().max(geographicCountriesRetrieveResponseCodeMax).describe('alpha-2 country code (e.g., PL, US, GB)'),
  "name": zod.string().max(geographicCountriesRetrieveResponseNameMax).describe('Official country name in English'),
  "created_at": zod.string().datetime({}).describe('Timestamp when the record was created'),
  "updated_at": zod.string().datetime({}).describe('Timestamp when the record was last updated')
}).describe('Full country serializer with all fields.')

/**
 * Get country by code.
 */
export const geographicCountriesByCodeRetrieveParams = zod.object({
  "id": zod.coerce.number()
})

export const geographicCountriesByCodeRetrieveResponseCodeMax = 2;
export const geographicCountriesByCodeRetrieveResponseNameMax = 100;


export const geographicCountriesByCodeRetrieveResponse = zod.object({
  "id": zod.number(),
  "code": zod.string().max(geographicCountriesByCodeRetrieveResponseCodeMax).describe('alpha-2 country code (e.g., PL, US, GB)'),
  "name": zod.string().max(geographicCountriesByCodeRetrieveResponseNameMax).describe('Official country name in English'),
  "created_at": zod.string().datetime({}).describe('Timestamp when the record was created'),
  "updated_at": zod.string().datetime({}).describe('Timestamp when the record was last updated')
}).describe('Full country serializer with all fields.')

/**
 * Search countries by name or code.
 */
export const geographicCountriesSearchRetrieveParams = zod.object({
  "id": zod.coerce.number()
})

export const geographicCountriesSearchRetrieveResponseCodeMax = 2;
export const geographicCountriesSearchRetrieveResponseNameMax = 100;


export const geographicCountriesSearchRetrieveResponse = zod.object({
  "id": zod.number(),
  "code": zod.string().max(geographicCountriesSearchRetrieveResponseCodeMax).describe('alpha-2 country code (e.g., PL, US, GB)'),
  "name": zod.string().max(geographicCountriesSearchRetrieveResponseNameMax).describe('Official country name in English'),
  "created_at": zod.string().datetime({}).describe('Timestamp when the record was created'),
  "updated_at": zod.string().datetime({}).describe('Timestamp when the record was last updated')
}).describe('Full country serializer with all fields.')

