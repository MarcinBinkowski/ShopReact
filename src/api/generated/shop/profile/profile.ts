/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * ShopDjango API
 * API for ShopDjango project
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  Address,
  AddressCreate,
  AddressUpdate,
  PaginatedAddressListList,
  PaginatedProfileListList,
  PatchedAddress,
  PatchedAddressUpdate,
  PatchedProfile,
  PatchedProfileUpdate,
  Profile,
  ProfileAddressesListParams,
  ProfileCreate,
  ProfileProfilesListParams,
  ProfileUpdate
} from '.././schemas';

import { shopInstance } from '../../../shop-mutator';

// https://stackoverflow.com/questions/49579094/typescript-conditional-types-filter-out-readonly-properties-pick-only-requir/49579497#49579497
type IfEquals<X, Y, A = X, B = never> = (<T>() => T extends X ? 1 : 2) extends <
T,
>() => T extends Y ? 1 : 2
? A
: B;

type WritableKeys<T> = {
[P in keyof T]-?: IfEquals<
  { [Q in P]: T[P] },
  { -readonly [Q in P]: T[P] },
  P
>;
}[keyof T];

type UnionToIntersection<U> =
  (U extends any ? (k: U)=>void : never) extends ((k: infer I)=>void) ? I : never;
type DistributeReadOnlyOverUnions<T> = T extends any ? NonReadonly<T> : never;

type Writable<T> = Pick<T, WritableKeys<T>>;
type NonReadonly<T> = [T] extends [UnionToIntersection<T>] ? {
  [P in keyof Writable<T>]: T[P] extends object
    ? NonReadonly<NonNullable<T[P]>>
    : T[P];
} : DistributeReadOnlyOverUnions<T>;





export const profileAddressesList = (
    params?: ProfileAddressesListParams,
 signal?: AbortSignal
) => {
      
      
      return shopInstance<PaginatedAddressListList>(
      {url: `/api/profile/addresses/`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getProfileAddressesListQueryKey = (params?: ProfileAddressesListParams,) => {
    return [`/api/profile/addresses/`, ...(params ? [params]: [])] as const;
    }

    
export const getProfileAddressesListQueryOptions = <TData = Awaited<ReturnType<typeof profileAddressesList>>, TError = unknown>(params?: ProfileAddressesListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof profileAddressesList>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getProfileAddressesListQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof profileAddressesList>>> = ({ signal }) => profileAddressesList(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof profileAddressesList>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ProfileAddressesListQueryResult = NonNullable<Awaited<ReturnType<typeof profileAddressesList>>>
export type ProfileAddressesListQueryError = unknown


export function useProfileAddressesList<TData = Awaited<ReturnType<typeof profileAddressesList>>, TError = unknown>(
 params: undefined |  ProfileAddressesListParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof profileAddressesList>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof profileAddressesList>>,
          TError,
          Awaited<ReturnType<typeof profileAddressesList>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useProfileAddressesList<TData = Awaited<ReturnType<typeof profileAddressesList>>, TError = unknown>(
 params?: ProfileAddressesListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof profileAddressesList>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof profileAddressesList>>,
          TError,
          Awaited<ReturnType<typeof profileAddressesList>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useProfileAddressesList<TData = Awaited<ReturnType<typeof profileAddressesList>>, TError = unknown>(
 params?: ProfileAddressesListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof profileAddressesList>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useProfileAddressesList<TData = Awaited<ReturnType<typeof profileAddressesList>>, TError = unknown>(
 params?: ProfileAddressesListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof profileAddressesList>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getProfileAddressesListQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const profileAddressesCreate = (
    addressCreate: AddressCreate,
 signal?: AbortSignal
) => {
      
      
      return shopInstance<AddressCreate>(
      {url: `/api/profile/addresses/`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: addressCreate, signal
    },
      );
    }
  


export const getProfileAddressesCreateMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof profileAddressesCreate>>, TError,{data: AddressCreate}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof profileAddressesCreate>>, TError,{data: AddressCreate}, TContext> => {

const mutationKey = ['profileAddressesCreate'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof profileAddressesCreate>>, {data: AddressCreate}> = (props) => {
          const {data} = props ?? {};

          return  profileAddressesCreate(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ProfileAddressesCreateMutationResult = NonNullable<Awaited<ReturnType<typeof profileAddressesCreate>>>
    export type ProfileAddressesCreateMutationBody = AddressCreate
    export type ProfileAddressesCreateMutationError = unknown

    export const useProfileAddressesCreate = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof profileAddressesCreate>>, TError,{data: AddressCreate}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof profileAddressesCreate>>,
        TError,
        {data: AddressCreate},
        TContext
      > => {

      const mutationOptions = getProfileAddressesCreateMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const profileAddressesRetrieve = (
    id: number,
 signal?: AbortSignal
) => {
      
      
      return shopInstance<Address>(
      {url: `/api/profile/addresses/${id}/`, method: 'GET', signal
    },
      );
    }
  

export const getProfileAddressesRetrieveQueryKey = (id: number,) => {
    return [`/api/profile/addresses/${id}/`] as const;
    }

    
export const getProfileAddressesRetrieveQueryOptions = <TData = Awaited<ReturnType<typeof profileAddressesRetrieve>>, TError = unknown>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof profileAddressesRetrieve>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getProfileAddressesRetrieveQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof profileAddressesRetrieve>>> = ({ signal }) => profileAddressesRetrieve(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof profileAddressesRetrieve>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ProfileAddressesRetrieveQueryResult = NonNullable<Awaited<ReturnType<typeof profileAddressesRetrieve>>>
export type ProfileAddressesRetrieveQueryError = unknown


export function useProfileAddressesRetrieve<TData = Awaited<ReturnType<typeof profileAddressesRetrieve>>, TError = unknown>(
 id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof profileAddressesRetrieve>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof profileAddressesRetrieve>>,
          TError,
          Awaited<ReturnType<typeof profileAddressesRetrieve>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useProfileAddressesRetrieve<TData = Awaited<ReturnType<typeof profileAddressesRetrieve>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof profileAddressesRetrieve>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof profileAddressesRetrieve>>,
          TError,
          Awaited<ReturnType<typeof profileAddressesRetrieve>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useProfileAddressesRetrieve<TData = Awaited<ReturnType<typeof profileAddressesRetrieve>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof profileAddressesRetrieve>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useProfileAddressesRetrieve<TData = Awaited<ReturnType<typeof profileAddressesRetrieve>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof profileAddressesRetrieve>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getProfileAddressesRetrieveQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const profileAddressesUpdate = (
    id: number,
    addressUpdate: AddressUpdate,
 ) => {
      
      
      return shopInstance<AddressUpdate>(
      {url: `/api/profile/addresses/${id}/`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: addressUpdate
    },
      );
    }
  


export const getProfileAddressesUpdateMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof profileAddressesUpdate>>, TError,{id: number;data: AddressUpdate}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof profileAddressesUpdate>>, TError,{id: number;data: AddressUpdate}, TContext> => {

const mutationKey = ['profileAddressesUpdate'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof profileAddressesUpdate>>, {id: number;data: AddressUpdate}> = (props) => {
          const {id,data} = props ?? {};

          return  profileAddressesUpdate(id,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ProfileAddressesUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof profileAddressesUpdate>>>
    export type ProfileAddressesUpdateMutationBody = AddressUpdate
    export type ProfileAddressesUpdateMutationError = unknown

    export const useProfileAddressesUpdate = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof profileAddressesUpdate>>, TError,{id: number;data: AddressUpdate}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof profileAddressesUpdate>>,
        TError,
        {id: number;data: AddressUpdate},
        TContext
      > => {

      const mutationOptions = getProfileAddressesUpdateMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const profileAddressesPartialUpdate = (
    id: number,
    patchedAddressUpdate: PatchedAddressUpdate,
 ) => {
      
      
      return shopInstance<AddressUpdate>(
      {url: `/api/profile/addresses/${id}/`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: patchedAddressUpdate
    },
      );
    }
  


export const getProfileAddressesPartialUpdateMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof profileAddressesPartialUpdate>>, TError,{id: number;data: PatchedAddressUpdate}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof profileAddressesPartialUpdate>>, TError,{id: number;data: PatchedAddressUpdate}, TContext> => {

const mutationKey = ['profileAddressesPartialUpdate'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof profileAddressesPartialUpdate>>, {id: number;data: PatchedAddressUpdate}> = (props) => {
          const {id,data} = props ?? {};

          return  profileAddressesPartialUpdate(id,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ProfileAddressesPartialUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof profileAddressesPartialUpdate>>>
    export type ProfileAddressesPartialUpdateMutationBody = PatchedAddressUpdate
    export type ProfileAddressesPartialUpdateMutationError = unknown

    export const useProfileAddressesPartialUpdate = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof profileAddressesPartialUpdate>>, TError,{id: number;data: PatchedAddressUpdate}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof profileAddressesPartialUpdate>>,
        TError,
        {id: number;data: PatchedAddressUpdate},
        TContext
      > => {

      const mutationOptions = getProfileAddressesPartialUpdateMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const profileAddressesDestroy = (
    id: number,
 ) => {
      
      
      return shopInstance<void>(
      {url: `/api/profile/addresses/${id}/`, method: 'DELETE'
    },
      );
    }
  


export const getProfileAddressesDestroyMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof profileAddressesDestroy>>, TError,{id: number}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof profileAddressesDestroy>>, TError,{id: number}, TContext> => {

const mutationKey = ['profileAddressesDestroy'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof profileAddressesDestroy>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  profileAddressesDestroy(id,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ProfileAddressesDestroyMutationResult = NonNullable<Awaited<ReturnType<typeof profileAddressesDestroy>>>
    
    export type ProfileAddressesDestroyMutationError = unknown

    export const useProfileAddressesDestroy = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof profileAddressesDestroy>>, TError,{id: number}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof profileAddressesDestroy>>,
        TError,
        {id: number},
        TContext
      > => {

      const mutationOptions = getProfileAddressesDestroyMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const profileAddressesSetDefaultPartialUpdate = (
    id: number,
    patchedAddress: NonReadonly<PatchedAddress>,
 ) => {
      
      
      return shopInstance<Address>(
      {url: `/api/profile/addresses/${id}/set_default/`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: patchedAddress
    },
      );
    }
  


export const getProfileAddressesSetDefaultPartialUpdateMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof profileAddressesSetDefaultPartialUpdate>>, TError,{id: number;data: NonReadonly<PatchedAddress>}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof profileAddressesSetDefaultPartialUpdate>>, TError,{id: number;data: NonReadonly<PatchedAddress>}, TContext> => {

const mutationKey = ['profileAddressesSetDefaultPartialUpdate'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof profileAddressesSetDefaultPartialUpdate>>, {id: number;data: NonReadonly<PatchedAddress>}> = (props) => {
          const {id,data} = props ?? {};

          return  profileAddressesSetDefaultPartialUpdate(id,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ProfileAddressesSetDefaultPartialUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof profileAddressesSetDefaultPartialUpdate>>>
    export type ProfileAddressesSetDefaultPartialUpdateMutationBody = NonReadonly<PatchedAddress>
    export type ProfileAddressesSetDefaultPartialUpdateMutationError = unknown

    export const useProfileAddressesSetDefaultPartialUpdate = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof profileAddressesSetDefaultPartialUpdate>>, TError,{id: number;data: NonReadonly<PatchedAddress>}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof profileAddressesSetDefaultPartialUpdate>>,
        TError,
        {id: number;data: NonReadonly<PatchedAddress>},
        TContext
      > => {

      const mutationOptions = getProfileAddressesSetDefaultPartialUpdateMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const profileAddressesBillingRetrieve = (
    
 signal?: AbortSignal
) => {
      
      
      return shopInstance<Address>(
      {url: `/api/profile/addresses/billing/`, method: 'GET', signal
    },
      );
    }
  

export const getProfileAddressesBillingRetrieveQueryKey = () => {
    return [`/api/profile/addresses/billing/`] as const;
    }

    
export const getProfileAddressesBillingRetrieveQueryOptions = <TData = Awaited<ReturnType<typeof profileAddressesBillingRetrieve>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof profileAddressesBillingRetrieve>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getProfileAddressesBillingRetrieveQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof profileAddressesBillingRetrieve>>> = ({ signal }) => profileAddressesBillingRetrieve(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof profileAddressesBillingRetrieve>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ProfileAddressesBillingRetrieveQueryResult = NonNullable<Awaited<ReturnType<typeof profileAddressesBillingRetrieve>>>
export type ProfileAddressesBillingRetrieveQueryError = unknown


export function useProfileAddressesBillingRetrieve<TData = Awaited<ReturnType<typeof profileAddressesBillingRetrieve>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof profileAddressesBillingRetrieve>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof profileAddressesBillingRetrieve>>,
          TError,
          Awaited<ReturnType<typeof profileAddressesBillingRetrieve>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useProfileAddressesBillingRetrieve<TData = Awaited<ReturnType<typeof profileAddressesBillingRetrieve>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof profileAddressesBillingRetrieve>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof profileAddressesBillingRetrieve>>,
          TError,
          Awaited<ReturnType<typeof profileAddressesBillingRetrieve>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useProfileAddressesBillingRetrieve<TData = Awaited<ReturnType<typeof profileAddressesBillingRetrieve>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof profileAddressesBillingRetrieve>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useProfileAddressesBillingRetrieve<TData = Awaited<ReturnType<typeof profileAddressesBillingRetrieve>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof profileAddressesBillingRetrieve>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getProfileAddressesBillingRetrieveQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const profileAddressesDefaultBillingRetrieve = (
    
 signal?: AbortSignal
) => {
      
      
      return shopInstance<Address>(
      {url: `/api/profile/addresses/default_billing/`, method: 'GET', signal
    },
      );
    }
  

export const getProfileAddressesDefaultBillingRetrieveQueryKey = () => {
    return [`/api/profile/addresses/default_billing/`] as const;
    }

    
export const getProfileAddressesDefaultBillingRetrieveQueryOptions = <TData = Awaited<ReturnType<typeof profileAddressesDefaultBillingRetrieve>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof profileAddressesDefaultBillingRetrieve>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getProfileAddressesDefaultBillingRetrieveQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof profileAddressesDefaultBillingRetrieve>>> = ({ signal }) => profileAddressesDefaultBillingRetrieve(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof profileAddressesDefaultBillingRetrieve>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ProfileAddressesDefaultBillingRetrieveQueryResult = NonNullable<Awaited<ReturnType<typeof profileAddressesDefaultBillingRetrieve>>>
export type ProfileAddressesDefaultBillingRetrieveQueryError = unknown


export function useProfileAddressesDefaultBillingRetrieve<TData = Awaited<ReturnType<typeof profileAddressesDefaultBillingRetrieve>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof profileAddressesDefaultBillingRetrieve>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof profileAddressesDefaultBillingRetrieve>>,
          TError,
          Awaited<ReturnType<typeof profileAddressesDefaultBillingRetrieve>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useProfileAddressesDefaultBillingRetrieve<TData = Awaited<ReturnType<typeof profileAddressesDefaultBillingRetrieve>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof profileAddressesDefaultBillingRetrieve>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof profileAddressesDefaultBillingRetrieve>>,
          TError,
          Awaited<ReturnType<typeof profileAddressesDefaultBillingRetrieve>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useProfileAddressesDefaultBillingRetrieve<TData = Awaited<ReturnType<typeof profileAddressesDefaultBillingRetrieve>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof profileAddressesDefaultBillingRetrieve>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useProfileAddressesDefaultBillingRetrieve<TData = Awaited<ReturnType<typeof profileAddressesDefaultBillingRetrieve>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof profileAddressesDefaultBillingRetrieve>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getProfileAddressesDefaultBillingRetrieveQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const profileAddressesDefaultShippingRetrieve = (
    
 signal?: AbortSignal
) => {
      
      
      return shopInstance<Address>(
      {url: `/api/profile/addresses/default_shipping/`, method: 'GET', signal
    },
      );
    }
  

export const getProfileAddressesDefaultShippingRetrieveQueryKey = () => {
    return [`/api/profile/addresses/default_shipping/`] as const;
    }

    
export const getProfileAddressesDefaultShippingRetrieveQueryOptions = <TData = Awaited<ReturnType<typeof profileAddressesDefaultShippingRetrieve>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof profileAddressesDefaultShippingRetrieve>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getProfileAddressesDefaultShippingRetrieveQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof profileAddressesDefaultShippingRetrieve>>> = ({ signal }) => profileAddressesDefaultShippingRetrieve(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof profileAddressesDefaultShippingRetrieve>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ProfileAddressesDefaultShippingRetrieveQueryResult = NonNullable<Awaited<ReturnType<typeof profileAddressesDefaultShippingRetrieve>>>
export type ProfileAddressesDefaultShippingRetrieveQueryError = unknown


export function useProfileAddressesDefaultShippingRetrieve<TData = Awaited<ReturnType<typeof profileAddressesDefaultShippingRetrieve>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof profileAddressesDefaultShippingRetrieve>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof profileAddressesDefaultShippingRetrieve>>,
          TError,
          Awaited<ReturnType<typeof profileAddressesDefaultShippingRetrieve>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useProfileAddressesDefaultShippingRetrieve<TData = Awaited<ReturnType<typeof profileAddressesDefaultShippingRetrieve>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof profileAddressesDefaultShippingRetrieve>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof profileAddressesDefaultShippingRetrieve>>,
          TError,
          Awaited<ReturnType<typeof profileAddressesDefaultShippingRetrieve>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useProfileAddressesDefaultShippingRetrieve<TData = Awaited<ReturnType<typeof profileAddressesDefaultShippingRetrieve>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof profileAddressesDefaultShippingRetrieve>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useProfileAddressesDefaultShippingRetrieve<TData = Awaited<ReturnType<typeof profileAddressesDefaultShippingRetrieve>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof profileAddressesDefaultShippingRetrieve>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getProfileAddressesDefaultShippingRetrieveQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const profileAddressesShippingRetrieve = (
    
 signal?: AbortSignal
) => {
      
      
      return shopInstance<Address>(
      {url: `/api/profile/addresses/shipping/`, method: 'GET', signal
    },
      );
    }
  

export const getProfileAddressesShippingRetrieveQueryKey = () => {
    return [`/api/profile/addresses/shipping/`] as const;
    }

    
export const getProfileAddressesShippingRetrieveQueryOptions = <TData = Awaited<ReturnType<typeof profileAddressesShippingRetrieve>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof profileAddressesShippingRetrieve>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getProfileAddressesShippingRetrieveQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof profileAddressesShippingRetrieve>>> = ({ signal }) => profileAddressesShippingRetrieve(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof profileAddressesShippingRetrieve>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ProfileAddressesShippingRetrieveQueryResult = NonNullable<Awaited<ReturnType<typeof profileAddressesShippingRetrieve>>>
export type ProfileAddressesShippingRetrieveQueryError = unknown


export function useProfileAddressesShippingRetrieve<TData = Awaited<ReturnType<typeof profileAddressesShippingRetrieve>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof profileAddressesShippingRetrieve>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof profileAddressesShippingRetrieve>>,
          TError,
          Awaited<ReturnType<typeof profileAddressesShippingRetrieve>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useProfileAddressesShippingRetrieve<TData = Awaited<ReturnType<typeof profileAddressesShippingRetrieve>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof profileAddressesShippingRetrieve>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof profileAddressesShippingRetrieve>>,
          TError,
          Awaited<ReturnType<typeof profileAddressesShippingRetrieve>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useProfileAddressesShippingRetrieve<TData = Awaited<ReturnType<typeof profileAddressesShippingRetrieve>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof profileAddressesShippingRetrieve>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useProfileAddressesShippingRetrieve<TData = Awaited<ReturnType<typeof profileAddressesShippingRetrieve>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof profileAddressesShippingRetrieve>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getProfileAddressesShippingRetrieveQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const profileAddressesSummaryRetrieve = (
    
 signal?: AbortSignal
) => {
      
      
      return shopInstance<Address>(
      {url: `/api/profile/addresses/summary/`, method: 'GET', signal
    },
      );
    }
  

export const getProfileAddressesSummaryRetrieveQueryKey = () => {
    return [`/api/profile/addresses/summary/`] as const;
    }

    
export const getProfileAddressesSummaryRetrieveQueryOptions = <TData = Awaited<ReturnType<typeof profileAddressesSummaryRetrieve>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof profileAddressesSummaryRetrieve>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getProfileAddressesSummaryRetrieveQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof profileAddressesSummaryRetrieve>>> = ({ signal }) => profileAddressesSummaryRetrieve(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof profileAddressesSummaryRetrieve>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ProfileAddressesSummaryRetrieveQueryResult = NonNullable<Awaited<ReturnType<typeof profileAddressesSummaryRetrieve>>>
export type ProfileAddressesSummaryRetrieveQueryError = unknown


export function useProfileAddressesSummaryRetrieve<TData = Awaited<ReturnType<typeof profileAddressesSummaryRetrieve>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof profileAddressesSummaryRetrieve>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof profileAddressesSummaryRetrieve>>,
          TError,
          Awaited<ReturnType<typeof profileAddressesSummaryRetrieve>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useProfileAddressesSummaryRetrieve<TData = Awaited<ReturnType<typeof profileAddressesSummaryRetrieve>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof profileAddressesSummaryRetrieve>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof profileAddressesSummaryRetrieve>>,
          TError,
          Awaited<ReturnType<typeof profileAddressesSummaryRetrieve>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useProfileAddressesSummaryRetrieve<TData = Awaited<ReturnType<typeof profileAddressesSummaryRetrieve>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof profileAddressesSummaryRetrieve>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useProfileAddressesSummaryRetrieve<TData = Awaited<ReturnType<typeof profileAddressesSummaryRetrieve>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof profileAddressesSummaryRetrieve>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getProfileAddressesSummaryRetrieveQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const profileAddressesUnsetDefaultPartialUpdate = (
    patchedAddress: NonReadonly<PatchedAddress>,
 ) => {
      
      
      return shopInstance<Address>(
      {url: `/api/profile/addresses/unset_default/`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: patchedAddress
    },
      );
    }
  


export const getProfileAddressesUnsetDefaultPartialUpdateMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof profileAddressesUnsetDefaultPartialUpdate>>, TError,{data: NonReadonly<PatchedAddress>}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof profileAddressesUnsetDefaultPartialUpdate>>, TError,{data: NonReadonly<PatchedAddress>}, TContext> => {

const mutationKey = ['profileAddressesUnsetDefaultPartialUpdate'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof profileAddressesUnsetDefaultPartialUpdate>>, {data: NonReadonly<PatchedAddress>}> = (props) => {
          const {data} = props ?? {};

          return  profileAddressesUnsetDefaultPartialUpdate(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ProfileAddressesUnsetDefaultPartialUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof profileAddressesUnsetDefaultPartialUpdate>>>
    export type ProfileAddressesUnsetDefaultPartialUpdateMutationBody = NonReadonly<PatchedAddress>
    export type ProfileAddressesUnsetDefaultPartialUpdateMutationError = unknown

    export const useProfileAddressesUnsetDefaultPartialUpdate = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof profileAddressesUnsetDefaultPartialUpdate>>, TError,{data: NonReadonly<PatchedAddress>}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof profileAddressesUnsetDefaultPartialUpdate>>,
        TError,
        {data: NonReadonly<PatchedAddress>},
        TContext
      > => {

      const mutationOptions = getProfileAddressesUnsetDefaultPartialUpdateMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const profileProfilesList = (
    params?: ProfileProfilesListParams,
 signal?: AbortSignal
) => {
      
      
      return shopInstance<PaginatedProfileListList>(
      {url: `/api/profile/profiles/`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getProfileProfilesListQueryKey = (params?: ProfileProfilesListParams,) => {
    return [`/api/profile/profiles/`, ...(params ? [params]: [])] as const;
    }

    
export const getProfileProfilesListQueryOptions = <TData = Awaited<ReturnType<typeof profileProfilesList>>, TError = unknown>(params?: ProfileProfilesListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof profileProfilesList>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getProfileProfilesListQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof profileProfilesList>>> = ({ signal }) => profileProfilesList(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof profileProfilesList>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ProfileProfilesListQueryResult = NonNullable<Awaited<ReturnType<typeof profileProfilesList>>>
export type ProfileProfilesListQueryError = unknown


export function useProfileProfilesList<TData = Awaited<ReturnType<typeof profileProfilesList>>, TError = unknown>(
 params: undefined |  ProfileProfilesListParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof profileProfilesList>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof profileProfilesList>>,
          TError,
          Awaited<ReturnType<typeof profileProfilesList>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useProfileProfilesList<TData = Awaited<ReturnType<typeof profileProfilesList>>, TError = unknown>(
 params?: ProfileProfilesListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof profileProfilesList>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof profileProfilesList>>,
          TError,
          Awaited<ReturnType<typeof profileProfilesList>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useProfileProfilesList<TData = Awaited<ReturnType<typeof profileProfilesList>>, TError = unknown>(
 params?: ProfileProfilesListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof profileProfilesList>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useProfileProfilesList<TData = Awaited<ReturnType<typeof profileProfilesList>>, TError = unknown>(
 params?: ProfileProfilesListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof profileProfilesList>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getProfileProfilesListQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const profileProfilesCreate = (
    profileCreate: ProfileCreate,
 signal?: AbortSignal
) => {
      
      
      return shopInstance<ProfileCreate>(
      {url: `/api/profile/profiles/`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: profileCreate, signal
    },
      );
    }
  


export const getProfileProfilesCreateMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof profileProfilesCreate>>, TError,{data: ProfileCreate}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof profileProfilesCreate>>, TError,{data: ProfileCreate}, TContext> => {

const mutationKey = ['profileProfilesCreate'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof profileProfilesCreate>>, {data: ProfileCreate}> = (props) => {
          const {data} = props ?? {};

          return  profileProfilesCreate(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ProfileProfilesCreateMutationResult = NonNullable<Awaited<ReturnType<typeof profileProfilesCreate>>>
    export type ProfileProfilesCreateMutationBody = ProfileCreate
    export type ProfileProfilesCreateMutationError = unknown

    export const useProfileProfilesCreate = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof profileProfilesCreate>>, TError,{data: ProfileCreate}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof profileProfilesCreate>>,
        TError,
        {data: ProfileCreate},
        TContext
      > => {

      const mutationOptions = getProfileProfilesCreateMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const profileProfilesRetrieve = (
    id: number,
 signal?: AbortSignal
) => {
      
      
      return shopInstance<Profile>(
      {url: `/api/profile/profiles/${id}/`, method: 'GET', signal
    },
      );
    }
  

export const getProfileProfilesRetrieveQueryKey = (id: number,) => {
    return [`/api/profile/profiles/${id}/`] as const;
    }

    
export const getProfileProfilesRetrieveQueryOptions = <TData = Awaited<ReturnType<typeof profileProfilesRetrieve>>, TError = unknown>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof profileProfilesRetrieve>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getProfileProfilesRetrieveQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof profileProfilesRetrieve>>> = ({ signal }) => profileProfilesRetrieve(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof profileProfilesRetrieve>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ProfileProfilesRetrieveQueryResult = NonNullable<Awaited<ReturnType<typeof profileProfilesRetrieve>>>
export type ProfileProfilesRetrieveQueryError = unknown


export function useProfileProfilesRetrieve<TData = Awaited<ReturnType<typeof profileProfilesRetrieve>>, TError = unknown>(
 id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof profileProfilesRetrieve>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof profileProfilesRetrieve>>,
          TError,
          Awaited<ReturnType<typeof profileProfilesRetrieve>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useProfileProfilesRetrieve<TData = Awaited<ReturnType<typeof profileProfilesRetrieve>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof profileProfilesRetrieve>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof profileProfilesRetrieve>>,
          TError,
          Awaited<ReturnType<typeof profileProfilesRetrieve>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useProfileProfilesRetrieve<TData = Awaited<ReturnType<typeof profileProfilesRetrieve>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof profileProfilesRetrieve>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useProfileProfilesRetrieve<TData = Awaited<ReturnType<typeof profileProfilesRetrieve>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof profileProfilesRetrieve>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getProfileProfilesRetrieveQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const profileProfilesUpdate = (
    id: number,
    profileUpdate: ProfileUpdate,
 ) => {
      
      
      return shopInstance<ProfileUpdate>(
      {url: `/api/profile/profiles/${id}/`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: profileUpdate
    },
      );
    }
  


export const getProfileProfilesUpdateMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof profileProfilesUpdate>>, TError,{id: number;data: ProfileUpdate}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof profileProfilesUpdate>>, TError,{id: number;data: ProfileUpdate}, TContext> => {

const mutationKey = ['profileProfilesUpdate'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof profileProfilesUpdate>>, {id: number;data: ProfileUpdate}> = (props) => {
          const {id,data} = props ?? {};

          return  profileProfilesUpdate(id,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ProfileProfilesUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof profileProfilesUpdate>>>
    export type ProfileProfilesUpdateMutationBody = ProfileUpdate
    export type ProfileProfilesUpdateMutationError = unknown

    export const useProfileProfilesUpdate = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof profileProfilesUpdate>>, TError,{id: number;data: ProfileUpdate}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof profileProfilesUpdate>>,
        TError,
        {id: number;data: ProfileUpdate},
        TContext
      > => {

      const mutationOptions = getProfileProfilesUpdateMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const profileProfilesPartialUpdate = (
    id: number,
    patchedProfileUpdate: PatchedProfileUpdate,
 ) => {
      
      
      return shopInstance<ProfileUpdate>(
      {url: `/api/profile/profiles/${id}/`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: patchedProfileUpdate
    },
      );
    }
  


export const getProfileProfilesPartialUpdateMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof profileProfilesPartialUpdate>>, TError,{id: number;data: PatchedProfileUpdate}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof profileProfilesPartialUpdate>>, TError,{id: number;data: PatchedProfileUpdate}, TContext> => {

const mutationKey = ['profileProfilesPartialUpdate'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof profileProfilesPartialUpdate>>, {id: number;data: PatchedProfileUpdate}> = (props) => {
          const {id,data} = props ?? {};

          return  profileProfilesPartialUpdate(id,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ProfileProfilesPartialUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof profileProfilesPartialUpdate>>>
    export type ProfileProfilesPartialUpdateMutationBody = PatchedProfileUpdate
    export type ProfileProfilesPartialUpdateMutationError = unknown

    export const useProfileProfilesPartialUpdate = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof profileProfilesPartialUpdate>>, TError,{id: number;data: PatchedProfileUpdate}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof profileProfilesPartialUpdate>>,
        TError,
        {id: number;data: PatchedProfileUpdate},
        TContext
      > => {

      const mutationOptions = getProfileProfilesPartialUpdateMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const profileProfilesDestroy = (
    id: number,
 ) => {
      
      
      return shopInstance<void>(
      {url: `/api/profile/profiles/${id}/`, method: 'DELETE'
    },
      );
    }
  


export const getProfileProfilesDestroyMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof profileProfilesDestroy>>, TError,{id: number}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof profileProfilesDestroy>>, TError,{id: number}, TContext> => {

const mutationKey = ['profileProfilesDestroy'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof profileProfilesDestroy>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  profileProfilesDestroy(id,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ProfileProfilesDestroyMutationResult = NonNullable<Awaited<ReturnType<typeof profileProfilesDestroy>>>
    
    export type ProfileProfilesDestroyMutationError = unknown

    export const useProfileProfilesDestroy = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof profileProfilesDestroy>>, TError,{id: number}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof profileProfilesDestroy>>,
        TError,
        {id: number},
        TContext
      > => {

      const mutationOptions = getProfileProfilesDestroyMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const profileProfilesUpdateCompletionStatusCreate = (
    id: number,
    profile: NonReadonly<Profile>,
 signal?: AbortSignal
) => {
      
      
      return shopInstance<Profile>(
      {url: `/api/profile/profiles/${id}/update_completion_status/`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: profile, signal
    },
      );
    }
  


export const getProfileProfilesUpdateCompletionStatusCreateMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof profileProfilesUpdateCompletionStatusCreate>>, TError,{id: number;data: NonReadonly<Profile>}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof profileProfilesUpdateCompletionStatusCreate>>, TError,{id: number;data: NonReadonly<Profile>}, TContext> => {

const mutationKey = ['profileProfilesUpdateCompletionStatusCreate'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof profileProfilesUpdateCompletionStatusCreate>>, {id: number;data: NonReadonly<Profile>}> = (props) => {
          const {id,data} = props ?? {};

          return  profileProfilesUpdateCompletionStatusCreate(id,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ProfileProfilesUpdateCompletionStatusCreateMutationResult = NonNullable<Awaited<ReturnType<typeof profileProfilesUpdateCompletionStatusCreate>>>
    export type ProfileProfilesUpdateCompletionStatusCreateMutationBody = NonReadonly<Profile>
    export type ProfileProfilesUpdateCompletionStatusCreateMutationError = unknown

    export const useProfileProfilesUpdateCompletionStatusCreate = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof profileProfilesUpdateCompletionStatusCreate>>, TError,{id: number;data: NonReadonly<Profile>}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof profileProfilesUpdateCompletionStatusCreate>>,
        TError,
        {id: number;data: NonReadonly<Profile>},
        TContext
      > => {

      const mutationOptions = getProfileProfilesUpdateCompletionStatusCreateMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const profileProfilesAddressesSummaryRetrieve = (
    
 signal?: AbortSignal
) => {
      
      
      return shopInstance<Profile>(
      {url: `/api/profile/profiles/addresses_summary/`, method: 'GET', signal
    },
      );
    }
  

export const getProfileProfilesAddressesSummaryRetrieveQueryKey = () => {
    return [`/api/profile/profiles/addresses_summary/`] as const;
    }

    
export const getProfileProfilesAddressesSummaryRetrieveQueryOptions = <TData = Awaited<ReturnType<typeof profileProfilesAddressesSummaryRetrieve>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof profileProfilesAddressesSummaryRetrieve>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getProfileProfilesAddressesSummaryRetrieveQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof profileProfilesAddressesSummaryRetrieve>>> = ({ signal }) => profileProfilesAddressesSummaryRetrieve(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof profileProfilesAddressesSummaryRetrieve>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ProfileProfilesAddressesSummaryRetrieveQueryResult = NonNullable<Awaited<ReturnType<typeof profileProfilesAddressesSummaryRetrieve>>>
export type ProfileProfilesAddressesSummaryRetrieveQueryError = unknown


export function useProfileProfilesAddressesSummaryRetrieve<TData = Awaited<ReturnType<typeof profileProfilesAddressesSummaryRetrieve>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof profileProfilesAddressesSummaryRetrieve>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof profileProfilesAddressesSummaryRetrieve>>,
          TError,
          Awaited<ReturnType<typeof profileProfilesAddressesSummaryRetrieve>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useProfileProfilesAddressesSummaryRetrieve<TData = Awaited<ReturnType<typeof profileProfilesAddressesSummaryRetrieve>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof profileProfilesAddressesSummaryRetrieve>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof profileProfilesAddressesSummaryRetrieve>>,
          TError,
          Awaited<ReturnType<typeof profileProfilesAddressesSummaryRetrieve>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useProfileProfilesAddressesSummaryRetrieve<TData = Awaited<ReturnType<typeof profileProfilesAddressesSummaryRetrieve>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof profileProfilesAddressesSummaryRetrieve>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useProfileProfilesAddressesSummaryRetrieve<TData = Awaited<ReturnType<typeof profileProfilesAddressesSummaryRetrieve>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof profileProfilesAddressesSummaryRetrieve>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getProfileProfilesAddressesSummaryRetrieveQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const profileProfilesCheckoutStatusRetrieve = (
    
 signal?: AbortSignal
) => {
      
      
      return shopInstance<Profile>(
      {url: `/api/profile/profiles/checkout_status/`, method: 'GET', signal
    },
      );
    }
  

export const getProfileProfilesCheckoutStatusRetrieveQueryKey = () => {
    return [`/api/profile/profiles/checkout_status/`] as const;
    }

    
export const getProfileProfilesCheckoutStatusRetrieveQueryOptions = <TData = Awaited<ReturnType<typeof profileProfilesCheckoutStatusRetrieve>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof profileProfilesCheckoutStatusRetrieve>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getProfileProfilesCheckoutStatusRetrieveQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof profileProfilesCheckoutStatusRetrieve>>> = ({ signal }) => profileProfilesCheckoutStatusRetrieve(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof profileProfilesCheckoutStatusRetrieve>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ProfileProfilesCheckoutStatusRetrieveQueryResult = NonNullable<Awaited<ReturnType<typeof profileProfilesCheckoutStatusRetrieve>>>
export type ProfileProfilesCheckoutStatusRetrieveQueryError = unknown


export function useProfileProfilesCheckoutStatusRetrieve<TData = Awaited<ReturnType<typeof profileProfilesCheckoutStatusRetrieve>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof profileProfilesCheckoutStatusRetrieve>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof profileProfilesCheckoutStatusRetrieve>>,
          TError,
          Awaited<ReturnType<typeof profileProfilesCheckoutStatusRetrieve>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useProfileProfilesCheckoutStatusRetrieve<TData = Awaited<ReturnType<typeof profileProfilesCheckoutStatusRetrieve>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof profileProfilesCheckoutStatusRetrieve>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof profileProfilesCheckoutStatusRetrieve>>,
          TError,
          Awaited<ReturnType<typeof profileProfilesCheckoutStatusRetrieve>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useProfileProfilesCheckoutStatusRetrieve<TData = Awaited<ReturnType<typeof profileProfilesCheckoutStatusRetrieve>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof profileProfilesCheckoutStatusRetrieve>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useProfileProfilesCheckoutStatusRetrieve<TData = Awaited<ReturnType<typeof profileProfilesCheckoutStatusRetrieve>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof profileProfilesCheckoutStatusRetrieve>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getProfileProfilesCheckoutStatusRetrieveQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const profileProfilesCompletionRequirementsRetrieve = (
    
 signal?: AbortSignal
) => {
      
      
      return shopInstance<Profile>(
      {url: `/api/profile/profiles/completion_requirements/`, method: 'GET', signal
    },
      );
    }
  

export const getProfileProfilesCompletionRequirementsRetrieveQueryKey = () => {
    return [`/api/profile/profiles/completion_requirements/`] as const;
    }

    
export const getProfileProfilesCompletionRequirementsRetrieveQueryOptions = <TData = Awaited<ReturnType<typeof profileProfilesCompletionRequirementsRetrieve>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof profileProfilesCompletionRequirementsRetrieve>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getProfileProfilesCompletionRequirementsRetrieveQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof profileProfilesCompletionRequirementsRetrieve>>> = ({ signal }) => profileProfilesCompletionRequirementsRetrieve(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof profileProfilesCompletionRequirementsRetrieve>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ProfileProfilesCompletionRequirementsRetrieveQueryResult = NonNullable<Awaited<ReturnType<typeof profileProfilesCompletionRequirementsRetrieve>>>
export type ProfileProfilesCompletionRequirementsRetrieveQueryError = unknown


export function useProfileProfilesCompletionRequirementsRetrieve<TData = Awaited<ReturnType<typeof profileProfilesCompletionRequirementsRetrieve>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof profileProfilesCompletionRequirementsRetrieve>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof profileProfilesCompletionRequirementsRetrieve>>,
          TError,
          Awaited<ReturnType<typeof profileProfilesCompletionRequirementsRetrieve>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useProfileProfilesCompletionRequirementsRetrieve<TData = Awaited<ReturnType<typeof profileProfilesCompletionRequirementsRetrieve>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof profileProfilesCompletionRequirementsRetrieve>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof profileProfilesCompletionRequirementsRetrieve>>,
          TError,
          Awaited<ReturnType<typeof profileProfilesCompletionRequirementsRetrieve>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useProfileProfilesCompletionRequirementsRetrieve<TData = Awaited<ReturnType<typeof profileProfilesCompletionRequirementsRetrieve>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof profileProfilesCompletionRequirementsRetrieve>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useProfileProfilesCompletionRequirementsRetrieve<TData = Awaited<ReturnType<typeof profileProfilesCompletionRequirementsRetrieve>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof profileProfilesCompletionRequirementsRetrieve>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getProfileProfilesCompletionRequirementsRetrieveQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const profileProfilesMarkCompletedPartialUpdate = (
    patchedProfile: NonReadonly<PatchedProfile>,
 ) => {
      
      
      return shopInstance<Profile>(
      {url: `/api/profile/profiles/mark_completed/`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: patchedProfile
    },
      );
    }
  


export const getProfileProfilesMarkCompletedPartialUpdateMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof profileProfilesMarkCompletedPartialUpdate>>, TError,{data: NonReadonly<PatchedProfile>}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof profileProfilesMarkCompletedPartialUpdate>>, TError,{data: NonReadonly<PatchedProfile>}, TContext> => {

const mutationKey = ['profileProfilesMarkCompletedPartialUpdate'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof profileProfilesMarkCompletedPartialUpdate>>, {data: NonReadonly<PatchedProfile>}> = (props) => {
          const {data} = props ?? {};

          return  profileProfilesMarkCompletedPartialUpdate(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ProfileProfilesMarkCompletedPartialUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof profileProfilesMarkCompletedPartialUpdate>>>
    export type ProfileProfilesMarkCompletedPartialUpdateMutationBody = NonReadonly<PatchedProfile>
    export type ProfileProfilesMarkCompletedPartialUpdateMutationError = unknown

    export const useProfileProfilesMarkCompletedPartialUpdate = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof profileProfilesMarkCompletedPartialUpdate>>, TError,{data: NonReadonly<PatchedProfile>}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof profileProfilesMarkCompletedPartialUpdate>>,
        TError,
        {data: NonReadonly<PatchedProfile>},
        TContext
      > => {

      const mutationOptions = getProfileProfilesMarkCompletedPartialUpdateMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const profileProfilesMeRetrieve = (
    
 signal?: AbortSignal
) => {
      
      
      return shopInstance<Profile>(
      {url: `/api/profile/profiles/me/`, method: 'GET', signal
    },
      );
    }
  

export const getProfileProfilesMeRetrieveQueryKey = () => {
    return [`/api/profile/profiles/me/`] as const;
    }

    
export const getProfileProfilesMeRetrieveQueryOptions = <TData = Awaited<ReturnType<typeof profileProfilesMeRetrieve>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof profileProfilesMeRetrieve>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getProfileProfilesMeRetrieveQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof profileProfilesMeRetrieve>>> = ({ signal }) => profileProfilesMeRetrieve(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof profileProfilesMeRetrieve>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ProfileProfilesMeRetrieveQueryResult = NonNullable<Awaited<ReturnType<typeof profileProfilesMeRetrieve>>>
export type ProfileProfilesMeRetrieveQueryError = unknown


export function useProfileProfilesMeRetrieve<TData = Awaited<ReturnType<typeof profileProfilesMeRetrieve>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof profileProfilesMeRetrieve>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof profileProfilesMeRetrieve>>,
          TError,
          Awaited<ReturnType<typeof profileProfilesMeRetrieve>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useProfileProfilesMeRetrieve<TData = Awaited<ReturnType<typeof profileProfilesMeRetrieve>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof profileProfilesMeRetrieve>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof profileProfilesMeRetrieve>>,
          TError,
          Awaited<ReturnType<typeof profileProfilesMeRetrieve>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useProfileProfilesMeRetrieve<TData = Awaited<ReturnType<typeof profileProfilesMeRetrieve>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof profileProfilesMeRetrieve>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useProfileProfilesMeRetrieve<TData = Awaited<ReturnType<typeof profileProfilesMeRetrieve>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof profileProfilesMeRetrieve>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getProfileProfilesMeRetrieveQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const profileProfilesMePartialUpdate = (
    patchedProfile: NonReadonly<PatchedProfile>,
 ) => {
      
      
      return shopInstance<Profile>(
      {url: `/api/profile/profiles/me/`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: patchedProfile
    },
      );
    }
  


export const getProfileProfilesMePartialUpdateMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof profileProfilesMePartialUpdate>>, TError,{data: NonReadonly<PatchedProfile>}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof profileProfilesMePartialUpdate>>, TError,{data: NonReadonly<PatchedProfile>}, TContext> => {

const mutationKey = ['profileProfilesMePartialUpdate'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof profileProfilesMePartialUpdate>>, {data: NonReadonly<PatchedProfile>}> = (props) => {
          const {data} = props ?? {};

          return  profileProfilesMePartialUpdate(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ProfileProfilesMePartialUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof profileProfilesMePartialUpdate>>>
    export type ProfileProfilesMePartialUpdateMutationBody = NonReadonly<PatchedProfile>
    export type ProfileProfilesMePartialUpdateMutationError = unknown

    export const useProfileProfilesMePartialUpdate = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof profileProfilesMePartialUpdate>>, TError,{data: NonReadonly<PatchedProfile>}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof profileProfilesMePartialUpdate>>,
        TError,
        {data: NonReadonly<PatchedProfile>},
        TContext
      > => {

      const mutationOptions = getProfileProfilesMePartialUpdateMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    