/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * ShopDjango API
 * API for ShopDjango project
 * OpenAPI spec version: 1.0.0
 */
import {
  z as zod
} from 'zod';


/**
 * ViewSet for managing user addresses.
 */
export const addressesListParams = zod.object({
  "id": zod.coerce.number()
})

export const addressesListQueryParams = zod.object({
  "page": zod.coerce.number().optional().describe('A page number within the paginated result set.'),
  "page_size": zod.coerce.number().optional().describe('Number of results to return per page.')
})

export const addressesListResponseResultsItemLabelMax = 50;


export const addressesListResponse = zod.object({
  "count": zod.number(),
  "next": zod.string().url().nullish(),
  "previous": zod.string().url().nullish(),
  "results": zod.array(zod.object({
  "id": zod.number(),
  "address_type": zod.enum(['shipping', 'billing']).describe('* `shipping` - Shipping\n* `billing` - Billing').describe('Type of address (shipping or billing)\n\n* `shipping` - Shipping\n* `billing` - Billing'),
  "address_type_display": zod.string(),
  "full_address": zod.string(),
  "label": zod.string().max(addressesListResponseResultsItemLabelMax).optional().describe('Optional label like \'Home\', \'Office\', etc.'),
  "is_default": zod.boolean().optional().describe('Whether this is the default address for this type'),
  "created_at": zod.string().datetime({}).describe('Timestamp when the record was created')
}))
})

/**
 * ViewSet for managing user addresses.
 */
export const addressesCreateParams = zod.object({
  "id": zod.coerce.number()
})

export const addressesCreateBodyAddressMax = 255;
export const addressesCreateBodyCityMax = 100;
export const addressesCreateBodyPostalCodeMax = 20;
export const addressesCreateBodyCountryMax = 2;
export const addressesCreateBodyLabelMax = 50;


export const addressesCreateBody = zod.object({
  "address": zod.string().max(addressesCreateBodyAddressMax).describe('Street address, apartment, unit, etc.'),
  "city": zod.string().max(addressesCreateBodyCityMax).describe('City name'),
  "postal_code": zod.string().max(addressesCreateBodyPostalCodeMax).describe('ZIP code or postal code'),
  "country": zod.string().max(addressesCreateBodyCountryMax).optional().describe('ISO country code (e.g., PL, US, CA, GB)'),
  "address_type": zod.enum(['shipping', 'billing']).describe('* `shipping` - Shipping\n* `billing` - Billing').describe('Type of address (shipping or billing)\n\n* `shipping` - Shipping\n* `billing` - Billing'),
  "is_default": zod.boolean().optional().describe('Whether this is the default address for this type'),
  "label": zod.string().max(addressesCreateBodyLabelMax).optional().describe('Optional label like \'Home\', \'Office\', etc.')
})

/**
 * ViewSet for managing user addresses.
 */
export const addressesRetrieveParams = zod.object({
  "id": zod.coerce.number()
})

export const addressesRetrieveResponseAddressMax = 255;
export const addressesRetrieveResponseCityMax = 100;
export const addressesRetrieveResponsePostalCodeMax = 20;
export const addressesRetrieveResponseCountryMax = 2;
export const addressesRetrieveResponseLabelMax = 50;


export const addressesRetrieveResponse = zod.object({
  "id": zod.number(),
  "address": zod.string().max(addressesRetrieveResponseAddressMax).describe('Street address, apartment, unit, etc.'),
  "city": zod.string().max(addressesRetrieveResponseCityMax).describe('City name'),
  "postal_code": zod.string().max(addressesRetrieveResponsePostalCodeMax).describe('ZIP code or postal code'),
  "country": zod.string().max(addressesRetrieveResponseCountryMax).optional().describe('ISO country code (e.g., PL, US, CA, GB)'),
  "address_type": zod.enum(['shipping', 'billing']).describe('* `shipping` - Shipping\n* `billing` - Billing').describe('Type of address (shipping or billing)\n\n* `shipping` - Shipping\n* `billing` - Billing'),
  "address_type_display": zod.string(),
  "is_default": zod.boolean().optional().describe('Whether this is the default address for this type'),
  "label": zod.string().max(addressesRetrieveResponseLabelMax).optional().describe('Optional label like \'Home\', \'Office\', etc.'),
  "full_address": zod.string(),
  "address_dict": zod.record(zod.string(), zod.any()),
  "is_complete": zod.boolean(),
  "created_at": zod.string().datetime({}).describe('Timestamp when the record was created'),
  "updated_at": zod.string().datetime({}).describe('Timestamp when the record was last updated')
})

/**
 * ViewSet for managing user addresses.
 */
export const addressesUpdateParams = zod.object({
  "id": zod.coerce.number()
})

export const addressesUpdateBodyAddressMax = 255;
export const addressesUpdateBodyCityMax = 100;
export const addressesUpdateBodyPostalCodeMax = 20;
export const addressesUpdateBodyCountryMax = 2;
export const addressesUpdateBodyLabelMax = 50;


export const addressesUpdateBody = zod.object({
  "address": zod.string().max(addressesUpdateBodyAddressMax).describe('Street address, apartment, unit, etc.'),
  "city": zod.string().max(addressesUpdateBodyCityMax).describe('City name'),
  "postal_code": zod.string().max(addressesUpdateBodyPostalCodeMax).describe('ZIP code or postal code'),
  "country": zod.string().max(addressesUpdateBodyCountryMax).optional().describe('ISO country code (e.g., PL, US, CA, GB)'),
  "is_default": zod.boolean().optional().describe('Whether this is the default address for this type'),
  "label": zod.string().max(addressesUpdateBodyLabelMax).optional().describe('Optional label like \'Home\', \'Office\', etc.')
})

export const addressesUpdateResponseAddressMax = 255;
export const addressesUpdateResponseCityMax = 100;
export const addressesUpdateResponsePostalCodeMax = 20;
export const addressesUpdateResponseCountryMax = 2;
export const addressesUpdateResponseLabelMax = 50;


export const addressesUpdateResponse = zod.object({
  "address": zod.string().max(addressesUpdateResponseAddressMax).describe('Street address, apartment, unit, etc.'),
  "city": zod.string().max(addressesUpdateResponseCityMax).describe('City name'),
  "postal_code": zod.string().max(addressesUpdateResponsePostalCodeMax).describe('ZIP code or postal code'),
  "country": zod.string().max(addressesUpdateResponseCountryMax).optional().describe('ISO country code (e.g., PL, US, CA, GB)'),
  "is_default": zod.boolean().optional().describe('Whether this is the default address for this type'),
  "label": zod.string().max(addressesUpdateResponseLabelMax).optional().describe('Optional label like \'Home\', \'Office\', etc.')
})

/**
 * ViewSet for managing user addresses.
 */
export const addressesPartialUpdateParams = zod.object({
  "id": zod.coerce.number()
})

export const addressesPartialUpdateBodyAddressMax = 255;
export const addressesPartialUpdateBodyCityMax = 100;
export const addressesPartialUpdateBodyPostalCodeMax = 20;
export const addressesPartialUpdateBodyCountryMax = 2;
export const addressesPartialUpdateBodyLabelMax = 50;


export const addressesPartialUpdateBody = zod.object({
  "address": zod.string().max(addressesPartialUpdateBodyAddressMax).optional().describe('Street address, apartment, unit, etc.'),
  "city": zod.string().max(addressesPartialUpdateBodyCityMax).optional().describe('City name'),
  "postal_code": zod.string().max(addressesPartialUpdateBodyPostalCodeMax).optional().describe('ZIP code or postal code'),
  "country": zod.string().max(addressesPartialUpdateBodyCountryMax).optional().describe('ISO country code (e.g., PL, US, CA, GB)'),
  "is_default": zod.boolean().optional().describe('Whether this is the default address for this type'),
  "label": zod.string().max(addressesPartialUpdateBodyLabelMax).optional().describe('Optional label like \'Home\', \'Office\', etc.')
})

export const addressesPartialUpdateResponseAddressMax = 255;
export const addressesPartialUpdateResponseCityMax = 100;
export const addressesPartialUpdateResponsePostalCodeMax = 20;
export const addressesPartialUpdateResponseCountryMax = 2;
export const addressesPartialUpdateResponseLabelMax = 50;


export const addressesPartialUpdateResponse = zod.object({
  "address": zod.string().max(addressesPartialUpdateResponseAddressMax).describe('Street address, apartment, unit, etc.'),
  "city": zod.string().max(addressesPartialUpdateResponseCityMax).describe('City name'),
  "postal_code": zod.string().max(addressesPartialUpdateResponsePostalCodeMax).describe('ZIP code or postal code'),
  "country": zod.string().max(addressesPartialUpdateResponseCountryMax).optional().describe('ISO country code (e.g., PL, US, CA, GB)'),
  "is_default": zod.boolean().optional().describe('Whether this is the default address for this type'),
  "label": zod.string().max(addressesPartialUpdateResponseLabelMax).optional().describe('Optional label like \'Home\', \'Office\', etc.')
})

/**
 * ViewSet for managing user addresses.
 */
export const addressesDestroyParams = zod.object({
  "id": zod.coerce.number()
})

/**
 * Set this address as default for its type.
 */
export const addressesSetDefaultPartialUpdateParams = zod.object({
  "id": zod.coerce.number()
})

export const addressesSetDefaultPartialUpdateBodyAddressMax = 255;
export const addressesSetDefaultPartialUpdateBodyCityMax = 100;
export const addressesSetDefaultPartialUpdateBodyPostalCodeMax = 20;
export const addressesSetDefaultPartialUpdateBodyCountryMax = 2;
export const addressesSetDefaultPartialUpdateBodyLabelMax = 50;


export const addressesSetDefaultPartialUpdateBody = zod.object({
  "address": zod.string().max(addressesSetDefaultPartialUpdateBodyAddressMax).optional().describe('Street address, apartment, unit, etc.'),
  "city": zod.string().max(addressesSetDefaultPartialUpdateBodyCityMax).optional().describe('City name'),
  "postal_code": zod.string().max(addressesSetDefaultPartialUpdateBodyPostalCodeMax).optional().describe('ZIP code or postal code'),
  "country": zod.string().max(addressesSetDefaultPartialUpdateBodyCountryMax).optional().describe('ISO country code (e.g., PL, US, CA, GB)'),
  "address_type": zod.enum(['shipping', 'billing']).describe('* `shipping` - Shipping\n* `billing` - Billing').optional().describe('Type of address (shipping or billing)\n\n* `shipping` - Shipping\n* `billing` - Billing'),
  "is_default": zod.boolean().optional().describe('Whether this is the default address for this type'),
  "label": zod.string().max(addressesSetDefaultPartialUpdateBodyLabelMax).optional().describe('Optional label like \'Home\', \'Office\', etc.')
})

export const addressesSetDefaultPartialUpdateResponseAddressMax = 255;
export const addressesSetDefaultPartialUpdateResponseCityMax = 100;
export const addressesSetDefaultPartialUpdateResponsePostalCodeMax = 20;
export const addressesSetDefaultPartialUpdateResponseCountryMax = 2;
export const addressesSetDefaultPartialUpdateResponseLabelMax = 50;


export const addressesSetDefaultPartialUpdateResponse = zod.object({
  "id": zod.number(),
  "address": zod.string().max(addressesSetDefaultPartialUpdateResponseAddressMax).describe('Street address, apartment, unit, etc.'),
  "city": zod.string().max(addressesSetDefaultPartialUpdateResponseCityMax).describe('City name'),
  "postal_code": zod.string().max(addressesSetDefaultPartialUpdateResponsePostalCodeMax).describe('ZIP code or postal code'),
  "country": zod.string().max(addressesSetDefaultPartialUpdateResponseCountryMax).optional().describe('ISO country code (e.g., PL, US, CA, GB)'),
  "address_type": zod.enum(['shipping', 'billing']).describe('* `shipping` - Shipping\n* `billing` - Billing').describe('Type of address (shipping or billing)\n\n* `shipping` - Shipping\n* `billing` - Billing'),
  "address_type_display": zod.string(),
  "is_default": zod.boolean().optional().describe('Whether this is the default address for this type'),
  "label": zod.string().max(addressesSetDefaultPartialUpdateResponseLabelMax).optional().describe('Optional label like \'Home\', \'Office\', etc.'),
  "full_address": zod.string(),
  "address_dict": zod.record(zod.string(), zod.any()),
  "is_complete": zod.boolean(),
  "created_at": zod.string().datetime({}).describe('Timestamp when the record was created'),
  "updated_at": zod.string().datetime({}).describe('Timestamp when the record was last updated')
})

/**
 * Get all billing addresses for the user.
 */
export const addressesBillingRetrieveParams = zod.object({
  "id": zod.coerce.number()
})

export const addressesBillingRetrieveResponseAddressMax = 255;
export const addressesBillingRetrieveResponseCityMax = 100;
export const addressesBillingRetrieveResponsePostalCodeMax = 20;
export const addressesBillingRetrieveResponseCountryMax = 2;
export const addressesBillingRetrieveResponseLabelMax = 50;


export const addressesBillingRetrieveResponse = zod.object({
  "id": zod.number(),
  "address": zod.string().max(addressesBillingRetrieveResponseAddressMax).describe('Street address, apartment, unit, etc.'),
  "city": zod.string().max(addressesBillingRetrieveResponseCityMax).describe('City name'),
  "postal_code": zod.string().max(addressesBillingRetrieveResponsePostalCodeMax).describe('ZIP code or postal code'),
  "country": zod.string().max(addressesBillingRetrieveResponseCountryMax).optional().describe('ISO country code (e.g., PL, US, CA, GB)'),
  "address_type": zod.enum(['shipping', 'billing']).describe('* `shipping` - Shipping\n* `billing` - Billing').describe('Type of address (shipping or billing)\n\n* `shipping` - Shipping\n* `billing` - Billing'),
  "address_type_display": zod.string(),
  "is_default": zod.boolean().optional().describe('Whether this is the default address for this type'),
  "label": zod.string().max(addressesBillingRetrieveResponseLabelMax).optional().describe('Optional label like \'Home\', \'Office\', etc.'),
  "full_address": zod.string(),
  "address_dict": zod.record(zod.string(), zod.any()),
  "is_complete": zod.boolean(),
  "created_at": zod.string().datetime({}).describe('Timestamp when the record was created'),
  "updated_at": zod.string().datetime({}).describe('Timestamp when the record was last updated')
})

/**
 * Get default billing address for the user.
 */
export const addressesDefaultBillingRetrieveParams = zod.object({
  "id": zod.coerce.number()
})

export const addressesDefaultBillingRetrieveResponseAddressMax = 255;
export const addressesDefaultBillingRetrieveResponseCityMax = 100;
export const addressesDefaultBillingRetrieveResponsePostalCodeMax = 20;
export const addressesDefaultBillingRetrieveResponseCountryMax = 2;
export const addressesDefaultBillingRetrieveResponseLabelMax = 50;


export const addressesDefaultBillingRetrieveResponse = zod.object({
  "id": zod.number(),
  "address": zod.string().max(addressesDefaultBillingRetrieveResponseAddressMax).describe('Street address, apartment, unit, etc.'),
  "city": zod.string().max(addressesDefaultBillingRetrieveResponseCityMax).describe('City name'),
  "postal_code": zod.string().max(addressesDefaultBillingRetrieveResponsePostalCodeMax).describe('ZIP code or postal code'),
  "country": zod.string().max(addressesDefaultBillingRetrieveResponseCountryMax).optional().describe('ISO country code (e.g., PL, US, CA, GB)'),
  "address_type": zod.enum(['shipping', 'billing']).describe('* `shipping` - Shipping\n* `billing` - Billing').describe('Type of address (shipping or billing)\n\n* `shipping` - Shipping\n* `billing` - Billing'),
  "address_type_display": zod.string(),
  "is_default": zod.boolean().optional().describe('Whether this is the default address for this type'),
  "label": zod.string().max(addressesDefaultBillingRetrieveResponseLabelMax).optional().describe('Optional label like \'Home\', \'Office\', etc.'),
  "full_address": zod.string(),
  "address_dict": zod.record(zod.string(), zod.any()),
  "is_complete": zod.boolean(),
  "created_at": zod.string().datetime({}).describe('Timestamp when the record was created'),
  "updated_at": zod.string().datetime({}).describe('Timestamp when the record was last updated')
})

/**
 * Get default shipping address for the user.
 */
export const addressesDefaultShippingRetrieveParams = zod.object({
  "id": zod.coerce.number()
})

export const addressesDefaultShippingRetrieveResponseAddressMax = 255;
export const addressesDefaultShippingRetrieveResponseCityMax = 100;
export const addressesDefaultShippingRetrieveResponsePostalCodeMax = 20;
export const addressesDefaultShippingRetrieveResponseCountryMax = 2;
export const addressesDefaultShippingRetrieveResponseLabelMax = 50;


export const addressesDefaultShippingRetrieveResponse = zod.object({
  "id": zod.number(),
  "address": zod.string().max(addressesDefaultShippingRetrieveResponseAddressMax).describe('Street address, apartment, unit, etc.'),
  "city": zod.string().max(addressesDefaultShippingRetrieveResponseCityMax).describe('City name'),
  "postal_code": zod.string().max(addressesDefaultShippingRetrieveResponsePostalCodeMax).describe('ZIP code or postal code'),
  "country": zod.string().max(addressesDefaultShippingRetrieveResponseCountryMax).optional().describe('ISO country code (e.g., PL, US, CA, GB)'),
  "address_type": zod.enum(['shipping', 'billing']).describe('* `shipping` - Shipping\n* `billing` - Billing').describe('Type of address (shipping or billing)\n\n* `shipping` - Shipping\n* `billing` - Billing'),
  "address_type_display": zod.string(),
  "is_default": zod.boolean().optional().describe('Whether this is the default address for this type'),
  "label": zod.string().max(addressesDefaultShippingRetrieveResponseLabelMax).optional().describe('Optional label like \'Home\', \'Office\', etc.'),
  "full_address": zod.string(),
  "address_dict": zod.record(zod.string(), zod.any()),
  "is_complete": zod.boolean(),
  "created_at": zod.string().datetime({}).describe('Timestamp when the record was created'),
  "updated_at": zod.string().datetime({}).describe('Timestamp when the record was last updated')
})

/**
 * Get all shipping addresses for the user.
 */
export const addressesShippingRetrieveParams = zod.object({
  "id": zod.coerce.number()
})

export const addressesShippingRetrieveResponseAddressMax = 255;
export const addressesShippingRetrieveResponseCityMax = 100;
export const addressesShippingRetrieveResponsePostalCodeMax = 20;
export const addressesShippingRetrieveResponseCountryMax = 2;
export const addressesShippingRetrieveResponseLabelMax = 50;


export const addressesShippingRetrieveResponse = zod.object({
  "id": zod.number(),
  "address": zod.string().max(addressesShippingRetrieveResponseAddressMax).describe('Street address, apartment, unit, etc.'),
  "city": zod.string().max(addressesShippingRetrieveResponseCityMax).describe('City name'),
  "postal_code": zod.string().max(addressesShippingRetrieveResponsePostalCodeMax).describe('ZIP code or postal code'),
  "country": zod.string().max(addressesShippingRetrieveResponseCountryMax).optional().describe('ISO country code (e.g., PL, US, CA, GB)'),
  "address_type": zod.enum(['shipping', 'billing']).describe('* `shipping` - Shipping\n* `billing` - Billing').describe('Type of address (shipping or billing)\n\n* `shipping` - Shipping\n* `billing` - Billing'),
  "address_type_display": zod.string(),
  "is_default": zod.boolean().optional().describe('Whether this is the default address for this type'),
  "label": zod.string().max(addressesShippingRetrieveResponseLabelMax).optional().describe('Optional label like \'Home\', \'Office\', etc.'),
  "full_address": zod.string(),
  "address_dict": zod.record(zod.string(), zod.any()),
  "is_complete": zod.boolean(),
  "created_at": zod.string().datetime({}).describe('Timestamp when the record was created'),
  "updated_at": zod.string().datetime({}).describe('Timestamp when the record was last updated')
})

/**
 * Get summary of user's addresses.
 */
export const addressesSummaryRetrieveParams = zod.object({
  "id": zod.coerce.number()
})

export const addressesSummaryRetrieveResponseAddressMax = 255;
export const addressesSummaryRetrieveResponseCityMax = 100;
export const addressesSummaryRetrieveResponsePostalCodeMax = 20;
export const addressesSummaryRetrieveResponseCountryMax = 2;
export const addressesSummaryRetrieveResponseLabelMax = 50;


export const addressesSummaryRetrieveResponse = zod.object({
  "id": zod.number(),
  "address": zod.string().max(addressesSummaryRetrieveResponseAddressMax).describe('Street address, apartment, unit, etc.'),
  "city": zod.string().max(addressesSummaryRetrieveResponseCityMax).describe('City name'),
  "postal_code": zod.string().max(addressesSummaryRetrieveResponsePostalCodeMax).describe('ZIP code or postal code'),
  "country": zod.string().max(addressesSummaryRetrieveResponseCountryMax).optional().describe('ISO country code (e.g., PL, US, CA, GB)'),
  "address_type": zod.enum(['shipping', 'billing']).describe('* `shipping` - Shipping\n* `billing` - Billing').describe('Type of address (shipping or billing)\n\n* `shipping` - Shipping\n* `billing` - Billing'),
  "address_type_display": zod.string(),
  "is_default": zod.boolean().optional().describe('Whether this is the default address for this type'),
  "label": zod.string().max(addressesSummaryRetrieveResponseLabelMax).optional().describe('Optional label like \'Home\', \'Office\', etc.'),
  "full_address": zod.string(),
  "address_dict": zod.record(zod.string(), zod.any()),
  "is_complete": zod.boolean(),
  "created_at": zod.string().datetime({}).describe('Timestamp when the record was created'),
  "updated_at": zod.string().datetime({}).describe('Timestamp when the record was last updated')
})

/**
 * Remove default status for addresses of specified type.
 */
export const addressesUnsetDefaultPartialUpdateParams = zod.object({
  "id": zod.coerce.number()
})

export const addressesUnsetDefaultPartialUpdateBodyAddressMax = 255;
export const addressesUnsetDefaultPartialUpdateBodyCityMax = 100;
export const addressesUnsetDefaultPartialUpdateBodyPostalCodeMax = 20;
export const addressesUnsetDefaultPartialUpdateBodyCountryMax = 2;
export const addressesUnsetDefaultPartialUpdateBodyLabelMax = 50;


export const addressesUnsetDefaultPartialUpdateBody = zod.object({
  "address": zod.string().max(addressesUnsetDefaultPartialUpdateBodyAddressMax).optional().describe('Street address, apartment, unit, etc.'),
  "city": zod.string().max(addressesUnsetDefaultPartialUpdateBodyCityMax).optional().describe('City name'),
  "postal_code": zod.string().max(addressesUnsetDefaultPartialUpdateBodyPostalCodeMax).optional().describe('ZIP code or postal code'),
  "country": zod.string().max(addressesUnsetDefaultPartialUpdateBodyCountryMax).optional().describe('ISO country code (e.g., PL, US, CA, GB)'),
  "address_type": zod.enum(['shipping', 'billing']).describe('* `shipping` - Shipping\n* `billing` - Billing').optional().describe('Type of address (shipping or billing)\n\n* `shipping` - Shipping\n* `billing` - Billing'),
  "is_default": zod.boolean().optional().describe('Whether this is the default address for this type'),
  "label": zod.string().max(addressesUnsetDefaultPartialUpdateBodyLabelMax).optional().describe('Optional label like \'Home\', \'Office\', etc.')
})

export const addressesUnsetDefaultPartialUpdateResponseAddressMax = 255;
export const addressesUnsetDefaultPartialUpdateResponseCityMax = 100;
export const addressesUnsetDefaultPartialUpdateResponsePostalCodeMax = 20;
export const addressesUnsetDefaultPartialUpdateResponseCountryMax = 2;
export const addressesUnsetDefaultPartialUpdateResponseLabelMax = 50;


export const addressesUnsetDefaultPartialUpdateResponse = zod.object({
  "id": zod.number(),
  "address": zod.string().max(addressesUnsetDefaultPartialUpdateResponseAddressMax).describe('Street address, apartment, unit, etc.'),
  "city": zod.string().max(addressesUnsetDefaultPartialUpdateResponseCityMax).describe('City name'),
  "postal_code": zod.string().max(addressesUnsetDefaultPartialUpdateResponsePostalCodeMax).describe('ZIP code or postal code'),
  "country": zod.string().max(addressesUnsetDefaultPartialUpdateResponseCountryMax).optional().describe('ISO country code (e.g., PL, US, CA, GB)'),
  "address_type": zod.enum(['shipping', 'billing']).describe('* `shipping` - Shipping\n* `billing` - Billing').describe('Type of address (shipping or billing)\n\n* `shipping` - Shipping\n* `billing` - Billing'),
  "address_type_display": zod.string(),
  "is_default": zod.boolean().optional().describe('Whether this is the default address for this type'),
  "label": zod.string().max(addressesUnsetDefaultPartialUpdateResponseLabelMax).optional().describe('Optional label like \'Home\', \'Office\', etc.'),
  "full_address": zod.string(),
  "address_dict": zod.record(zod.string(), zod.any()),
  "is_complete": zod.boolean(),
  "created_at": zod.string().datetime({}).describe('Timestamp when the record was created'),
  "updated_at": zod.string().datetime({}).describe('Timestamp when the record was last updated')
})

