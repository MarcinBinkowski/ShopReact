/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * ShopDjango API
 * API for ShopDjango project
 * OpenAPI spec version: 1.0.0
 */
import {
  z as zod
} from 'zod';


/**
 * ViewSet for Category model with CRUD operations.
 */
export const catalogCategoriesListQueryParams = zod.object({
  "ordering": zod.coerce.string().optional().describe('Which field to use when ordering the results.'),
  "page": zod.coerce.number().optional().describe('A page number within the paginated result set.'),
  "search": zod.coerce.string().optional().describe('A search term.')
})

export const catalogCategoriesListResponseResultsItemNameMax = 100;
export const catalogCategoriesListResponseResultsItemSlugMax = 100;

export const catalogCategoriesListResponseResultsItemSlugRegExp = new RegExp('^[-a-zA-Z0-9_]+$');


export const catalogCategoriesListResponse = zod.object({
  "count": zod.number(),
  "next": zod.string().url().nullish(),
  "previous": zod.string().url().nullish(),
  "results": zod.array(zod.object({
  "id": zod.number(),
  "name": zod.string().max(catalogCategoriesListResponseResultsItemNameMax).describe('Category name'),
  "slug": zod.string().max(catalogCategoriesListResponseResultsItemSlugMax).regex(catalogCategoriesListResponseResultsItemSlugRegExp).describe('URL-friendly version of the name'),
  "description": zod.string().optional().describe('Category description'),
  "is_active": zod.boolean().optional().describe('Whether this category is visible'),
  "active_product_count": zod.number(),
  "created_at": zod.string().datetime({}).describe('Timestamp when the record was created'),
  "updated_at": zod.string().datetime({}).describe('Timestamp when the record was last updated')
}).describe('Serializer for Category model.'))
})

/**
 * ViewSet for Category model with CRUD operations.
 */
export const catalogCategoriesCreateBodyNameMax = 100;
export const catalogCategoriesCreateBodySlugMax = 100;

export const catalogCategoriesCreateBodySlugRegExp = new RegExp('^[-a-zA-Z0-9_]+$');


export const catalogCategoriesCreateBody = zod.object({
  "name": zod.string().max(catalogCategoriesCreateBodyNameMax).describe('Category name'),
  "slug": zod.string().max(catalogCategoriesCreateBodySlugMax).regex(catalogCategoriesCreateBodySlugRegExp).describe('URL-friendly version of the name'),
  "description": zod.string().optional().describe('Category description'),
  "is_active": zod.boolean().optional().describe('Whether this category is visible')
}).describe('Serializer for Category model.')

/**
 * ViewSet for Category model with CRUD operations.
 */
export const catalogCategoriesRetrieveParams = zod.object({
  "id": zod.coerce.number().describe('A unique integer value identifying this category.')
})

export const catalogCategoriesRetrieveResponseNameMax = 100;
export const catalogCategoriesRetrieveResponseSlugMax = 100;

export const catalogCategoriesRetrieveResponseSlugRegExp = new RegExp('^[-a-zA-Z0-9_]+$');


export const catalogCategoriesRetrieveResponse = zod.object({
  "id": zod.number(),
  "name": zod.string().max(catalogCategoriesRetrieveResponseNameMax).describe('Category name'),
  "slug": zod.string().max(catalogCategoriesRetrieveResponseSlugMax).regex(catalogCategoriesRetrieveResponseSlugRegExp).describe('URL-friendly version of the name'),
  "description": zod.string().optional().describe('Category description'),
  "is_active": zod.boolean().optional().describe('Whether this category is visible'),
  "active_product_count": zod.number(),
  "created_at": zod.string().datetime({}).describe('Timestamp when the record was created'),
  "updated_at": zod.string().datetime({}).describe('Timestamp when the record was last updated')
}).describe('Serializer for Category model.')

/**
 * ViewSet for Category model with CRUD operations.
 */
export const catalogCategoriesUpdateParams = zod.object({
  "id": zod.coerce.number().describe('A unique integer value identifying this category.')
})

export const catalogCategoriesUpdateBodyNameMax = 100;
export const catalogCategoriesUpdateBodySlugMax = 100;

export const catalogCategoriesUpdateBodySlugRegExp = new RegExp('^[-a-zA-Z0-9_]+$');


export const catalogCategoriesUpdateBody = zod.object({
  "name": zod.string().max(catalogCategoriesUpdateBodyNameMax).describe('Category name'),
  "slug": zod.string().max(catalogCategoriesUpdateBodySlugMax).regex(catalogCategoriesUpdateBodySlugRegExp).describe('URL-friendly version of the name'),
  "description": zod.string().optional().describe('Category description'),
  "is_active": zod.boolean().optional().describe('Whether this category is visible')
}).describe('Serializer for Category model.')

export const catalogCategoriesUpdateResponseNameMax = 100;
export const catalogCategoriesUpdateResponseSlugMax = 100;

export const catalogCategoriesUpdateResponseSlugRegExp = new RegExp('^[-a-zA-Z0-9_]+$');


export const catalogCategoriesUpdateResponse = zod.object({
  "id": zod.number(),
  "name": zod.string().max(catalogCategoriesUpdateResponseNameMax).describe('Category name'),
  "slug": zod.string().max(catalogCategoriesUpdateResponseSlugMax).regex(catalogCategoriesUpdateResponseSlugRegExp).describe('URL-friendly version of the name'),
  "description": zod.string().optional().describe('Category description'),
  "is_active": zod.boolean().optional().describe('Whether this category is visible'),
  "active_product_count": zod.number(),
  "created_at": zod.string().datetime({}).describe('Timestamp when the record was created'),
  "updated_at": zod.string().datetime({}).describe('Timestamp when the record was last updated')
}).describe('Serializer for Category model.')

/**
 * ViewSet for Category model with CRUD operations.
 */
export const catalogCategoriesPartialUpdateParams = zod.object({
  "id": zod.coerce.number().describe('A unique integer value identifying this category.')
})

export const catalogCategoriesPartialUpdateBodyNameMax = 100;
export const catalogCategoriesPartialUpdateBodySlugMax = 100;

export const catalogCategoriesPartialUpdateBodySlugRegExp = new RegExp('^[-a-zA-Z0-9_]+$');


export const catalogCategoriesPartialUpdateBody = zod.object({
  "name": zod.string().max(catalogCategoriesPartialUpdateBodyNameMax).optional().describe('Category name'),
  "slug": zod.string().max(catalogCategoriesPartialUpdateBodySlugMax).regex(catalogCategoriesPartialUpdateBodySlugRegExp).optional().describe('URL-friendly version of the name'),
  "description": zod.string().optional().describe('Category description'),
  "is_active": zod.boolean().optional().describe('Whether this category is visible')
}).describe('Serializer for Category model.')

export const catalogCategoriesPartialUpdateResponseNameMax = 100;
export const catalogCategoriesPartialUpdateResponseSlugMax = 100;

export const catalogCategoriesPartialUpdateResponseSlugRegExp = new RegExp('^[-a-zA-Z0-9_]+$');


export const catalogCategoriesPartialUpdateResponse = zod.object({
  "id": zod.number(),
  "name": zod.string().max(catalogCategoriesPartialUpdateResponseNameMax).describe('Category name'),
  "slug": zod.string().max(catalogCategoriesPartialUpdateResponseSlugMax).regex(catalogCategoriesPartialUpdateResponseSlugRegExp).describe('URL-friendly version of the name'),
  "description": zod.string().optional().describe('Category description'),
  "is_active": zod.boolean().optional().describe('Whether this category is visible'),
  "active_product_count": zod.number(),
  "created_at": zod.string().datetime({}).describe('Timestamp when the record was created'),
  "updated_at": zod.string().datetime({}).describe('Timestamp when the record was last updated')
}).describe('Serializer for Category model.')

/**
 * ViewSet for Category model with CRUD operations.
 */
export const catalogCategoriesDestroyParams = zod.object({
  "id": zod.coerce.number().describe('A unique integer value identifying this category.')
})

/**
 * Get all products in this category.
 */
export const catalogCategoriesProductsRetrieveParams = zod.object({
  "id": zod.coerce.number().describe('A unique integer value identifying this category.')
})

export const catalogCategoriesProductsRetrieveResponseNameMax = 100;
export const catalogCategoriesProductsRetrieveResponseSlugMax = 100;

export const catalogCategoriesProductsRetrieveResponseSlugRegExp = new RegExp('^[-a-zA-Z0-9_]+$');


export const catalogCategoriesProductsRetrieveResponse = zod.object({
  "id": zod.number(),
  "name": zod.string().max(catalogCategoriesProductsRetrieveResponseNameMax).describe('Category name'),
  "slug": zod.string().max(catalogCategoriesProductsRetrieveResponseSlugMax).regex(catalogCategoriesProductsRetrieveResponseSlugRegExp).describe('URL-friendly version of the name'),
  "description": zod.string().optional().describe('Category description'),
  "is_active": zod.boolean().optional().describe('Whether this category is visible'),
  "active_product_count": zod.number(),
  "created_at": zod.string().datetime({}).describe('Timestamp when the record was created'),
  "updated_at": zod.string().datetime({}).describe('Timestamp when the record was last updated')
}).describe('Serializer for Category model.')

/**
 * ViewSet for ProductImage model with CRUD operations.
 */
export const catalogImagesListQueryParams = zod.object({
  "is_primary": zod.coerce.boolean().optional(),
  "ordering": zod.coerce.string().optional().describe('Which field to use when ordering the results.'),
  "page": zod.coerce.number().optional().describe('A page number within the paginated result set.'),
  "product": zod.coerce.number().optional()
})

export const catalogImagesListResponseResultsItemAltTextMax = 255;
export const catalogImagesListResponseResultsItemSortOrderMin = 0;

export const catalogImagesListResponseResultsItemSortOrderMax = 2147483647;


export const catalogImagesListResponse = zod.object({
  "count": zod.number(),
  "next": zod.string().url().nullish(),
  "previous": zod.string().url().nullish(),
  "results": zod.array(zod.object({
  "id": zod.number(),
  "image": zod.string().url().describe('Product image'),
  "alt_text": zod.string().max(catalogImagesListResponseResultsItemAltTextMax).optional().describe('Alternative text for the image'),
  "is_primary": zod.boolean().optional().describe('Whether this is the primary product image'),
  "sort_order": zod.number().min(catalogImagesListResponseResultsItemSortOrderMin).max(catalogImagesListResponseResultsItemSortOrderMax).optional().describe('Display order of images'),
  "created_at": zod.string().datetime({}).describe('Timestamp when the record was created'),
  "updated_at": zod.string().datetime({}).describe('Timestamp when the record was last updated')
}).describe('Serializer for ProductImage model.'))
})

/**
 * ViewSet for ProductImage model with CRUD operations.
 */
export const catalogImagesCreateBodyAltTextMax = 255;
export const catalogImagesCreateBodySortOrderMin = 0;

export const catalogImagesCreateBodySortOrderMax = 2147483647;


export const catalogImagesCreateBody = zod.object({
  "image": zod.string().url().describe('Product image'),
  "alt_text": zod.string().max(catalogImagesCreateBodyAltTextMax).optional().describe('Alternative text for the image'),
  "is_primary": zod.boolean().optional().describe('Whether this is the primary product image'),
  "sort_order": zod.number().min(catalogImagesCreateBodySortOrderMin).max(catalogImagesCreateBodySortOrderMax).optional().describe('Display order of images')
}).describe('Serializer for ProductImage model.')

/**
 * ViewSet for ProductImage model with CRUD operations.
 */
export const catalogImagesRetrieveParams = zod.object({
  "id": zod.coerce.number().describe('A unique integer value identifying this product image.')
})

export const catalogImagesRetrieveResponseAltTextMax = 255;
export const catalogImagesRetrieveResponseSortOrderMin = 0;

export const catalogImagesRetrieveResponseSortOrderMax = 2147483647;


export const catalogImagesRetrieveResponse = zod.object({
  "id": zod.number(),
  "image": zod.string().url().describe('Product image'),
  "alt_text": zod.string().max(catalogImagesRetrieveResponseAltTextMax).optional().describe('Alternative text for the image'),
  "is_primary": zod.boolean().optional().describe('Whether this is the primary product image'),
  "sort_order": zod.number().min(catalogImagesRetrieveResponseSortOrderMin).max(catalogImagesRetrieveResponseSortOrderMax).optional().describe('Display order of images'),
  "created_at": zod.string().datetime({}).describe('Timestamp when the record was created'),
  "updated_at": zod.string().datetime({}).describe('Timestamp when the record was last updated')
}).describe('Serializer for ProductImage model.')

/**
 * ViewSet for ProductImage model with CRUD operations.
 */
export const catalogImagesUpdateParams = zod.object({
  "id": zod.coerce.number().describe('A unique integer value identifying this product image.')
})

export const catalogImagesUpdateBodyAltTextMax = 255;
export const catalogImagesUpdateBodySortOrderMin = 0;

export const catalogImagesUpdateBodySortOrderMax = 2147483647;


export const catalogImagesUpdateBody = zod.object({
  "image": zod.string().url().describe('Product image'),
  "alt_text": zod.string().max(catalogImagesUpdateBodyAltTextMax).optional().describe('Alternative text for the image'),
  "is_primary": zod.boolean().optional().describe('Whether this is the primary product image'),
  "sort_order": zod.number().min(catalogImagesUpdateBodySortOrderMin).max(catalogImagesUpdateBodySortOrderMax).optional().describe('Display order of images')
}).describe('Serializer for ProductImage model.')

export const catalogImagesUpdateResponseAltTextMax = 255;
export const catalogImagesUpdateResponseSortOrderMin = 0;

export const catalogImagesUpdateResponseSortOrderMax = 2147483647;


export const catalogImagesUpdateResponse = zod.object({
  "id": zod.number(),
  "image": zod.string().url().describe('Product image'),
  "alt_text": zod.string().max(catalogImagesUpdateResponseAltTextMax).optional().describe('Alternative text for the image'),
  "is_primary": zod.boolean().optional().describe('Whether this is the primary product image'),
  "sort_order": zod.number().min(catalogImagesUpdateResponseSortOrderMin).max(catalogImagesUpdateResponseSortOrderMax).optional().describe('Display order of images'),
  "created_at": zod.string().datetime({}).describe('Timestamp when the record was created'),
  "updated_at": zod.string().datetime({}).describe('Timestamp when the record was last updated')
}).describe('Serializer for ProductImage model.')

/**
 * ViewSet for ProductImage model with CRUD operations.
 */
export const catalogImagesPartialUpdateParams = zod.object({
  "id": zod.coerce.number().describe('A unique integer value identifying this product image.')
})

export const catalogImagesPartialUpdateBodyAltTextMax = 255;
export const catalogImagesPartialUpdateBodySortOrderMin = 0;

export const catalogImagesPartialUpdateBodySortOrderMax = 2147483647;


export const catalogImagesPartialUpdateBody = zod.object({
  "image": zod.string().url().optional().describe('Product image'),
  "alt_text": zod.string().max(catalogImagesPartialUpdateBodyAltTextMax).optional().describe('Alternative text for the image'),
  "is_primary": zod.boolean().optional().describe('Whether this is the primary product image'),
  "sort_order": zod.number().min(catalogImagesPartialUpdateBodySortOrderMin).max(catalogImagesPartialUpdateBodySortOrderMax).optional().describe('Display order of images')
}).describe('Serializer for ProductImage model.')

export const catalogImagesPartialUpdateResponseAltTextMax = 255;
export const catalogImagesPartialUpdateResponseSortOrderMin = 0;

export const catalogImagesPartialUpdateResponseSortOrderMax = 2147483647;


export const catalogImagesPartialUpdateResponse = zod.object({
  "id": zod.number(),
  "image": zod.string().url().describe('Product image'),
  "alt_text": zod.string().max(catalogImagesPartialUpdateResponseAltTextMax).optional().describe('Alternative text for the image'),
  "is_primary": zod.boolean().optional().describe('Whether this is the primary product image'),
  "sort_order": zod.number().min(catalogImagesPartialUpdateResponseSortOrderMin).max(catalogImagesPartialUpdateResponseSortOrderMax).optional().describe('Display order of images'),
  "created_at": zod.string().datetime({}).describe('Timestamp when the record was created'),
  "updated_at": zod.string().datetime({}).describe('Timestamp when the record was last updated')
}).describe('Serializer for ProductImage model.')

/**
 * ViewSet for ProductImage model with CRUD operations.
 */
export const catalogImagesDestroyParams = zod.object({
  "id": zod.coerce.number().describe('A unique integer value identifying this product image.')
})

/**
 * Set this image as primary for its product.
 */
export const catalogImagesSetPrimaryCreateParams = zod.object({
  "id": zod.coerce.number().describe('A unique integer value identifying this product image.')
})

export const catalogImagesSetPrimaryCreateBodyAltTextMax = 255;
export const catalogImagesSetPrimaryCreateBodySortOrderMin = 0;

export const catalogImagesSetPrimaryCreateBodySortOrderMax = 2147483647;


export const catalogImagesSetPrimaryCreateBody = zod.object({
  "image": zod.string().url().describe('Product image'),
  "alt_text": zod.string().max(catalogImagesSetPrimaryCreateBodyAltTextMax).optional().describe('Alternative text for the image'),
  "is_primary": zod.boolean().optional().describe('Whether this is the primary product image'),
  "sort_order": zod.number().min(catalogImagesSetPrimaryCreateBodySortOrderMin).max(catalogImagesSetPrimaryCreateBodySortOrderMax).optional().describe('Display order of images')
}).describe('Serializer for ProductImage model.')

export const catalogImagesSetPrimaryCreateResponseAltTextMax = 255;
export const catalogImagesSetPrimaryCreateResponseSortOrderMin = 0;

export const catalogImagesSetPrimaryCreateResponseSortOrderMax = 2147483647;


export const catalogImagesSetPrimaryCreateResponse = zod.object({
  "id": zod.number(),
  "image": zod.string().url().describe('Product image'),
  "alt_text": zod.string().max(catalogImagesSetPrimaryCreateResponseAltTextMax).optional().describe('Alternative text for the image'),
  "is_primary": zod.boolean().optional().describe('Whether this is the primary product image'),
  "sort_order": zod.number().min(catalogImagesSetPrimaryCreateResponseSortOrderMin).max(catalogImagesSetPrimaryCreateResponseSortOrderMax).optional().describe('Display order of images'),
  "created_at": zod.string().datetime({}).describe('Timestamp when the record was created'),
  "updated_at": zod.string().datetime({}).describe('Timestamp when the record was last updated')
}).describe('Serializer for ProductImage model.')

/**
 * ViewSet for Product model with advanced CRUD operations.
 */
export const catalogProductsListQueryParams = zod.object({
  "category": zod.coerce.string().optional(),
  "created_at__date__gte": zod.coerce.string().date().optional(),
  "created_at__date__lte": zod.coerce.string().date().optional(),
  "in_stock": zod.coerce.boolean().optional(),
  "is_visible": zod.coerce.boolean().optional(),
  "max_price": zod.coerce.number().optional(),
  "min_price": zod.coerce.number().optional(),
  "name__icontains": zod.coerce.string().optional(),
  "on_sale": zod.coerce.boolean().optional(),
  "ordering": zod.coerce.string().optional().describe('Which field to use when ordering the results.'),
  "page": zod.coerce.number().optional().describe('A page number within the paginated result set.'),
  "price": zod.coerce.number().optional(),
  "price__gte": zod.coerce.number().optional(),
  "price__lte": zod.coerce.number().optional(),
  "search": zod.coerce.string().optional().describe('A search term.'),
  "sku": zod.coerce.string().optional(),
  "sku__icontains": zod.coerce.string().optional(),
  "status": zod.array(zod.enum(['active', 'draft', 'inactive', 'out_of_stock'])).optional().describe('Product status\n\n* `draft` - Draft\n* `active` - Active\n* `inactive` - Inactive\n* `out_of_stock` - Out of Stock'),
  "stock_quantity": zod.coerce.number().optional(),
  "stock_quantity__gte": zod.coerce.number().optional(),
  "stock_quantity__lte": zod.coerce.number().optional(),
  "tags": zod.coerce.string().optional()
})

export const catalogProductsListResponseResultsItemNameMax = 200;
export const catalogProductsListResponseResultsItemSlugMax = 200;

export const catalogProductsListResponseResultsItemSlugRegExp = new RegExp('^[-a-zA-Z0-9_]+$');
export const catalogProductsListResponseResultsItemShortDescriptionMax = 500;
export const catalogProductsListResponseResultsItemPriceRegExp = new RegExp('^-?\\d{0,8}(?:\\.\\d{0,2})?$');
export const catalogProductsListResponseResultsItemOriginalPriceRegExp = new RegExp('^-?\\d{0,8}(?:\\.\\d{0,2})?$');
export const catalogProductsListResponseResultsItemSkuMax = 100;
export const catalogProductsListResponseResultsItemStockQuantityMin = 0;

export const catalogProductsListResponseResultsItemStockQuantityMax = 2147483647;
export const catalogProductsListResponseResultsItemCategoryNameMax = 100;
export const catalogProductsListResponseResultsItemCategorySlugMax = 100;

export const catalogProductsListResponseResultsItemCategorySlugRegExp = new RegExp('^[-a-zA-Z0-9_]+$');


export const catalogProductsListResponse = zod.object({
  "count": zod.number(),
  "next": zod.string().url().nullish(),
  "previous": zod.string().url().nullish(),
  "results": zod.array(zod.object({
  "id": zod.number(),
  "name": zod.string().max(catalogProductsListResponseResultsItemNameMax).describe('Product name'),
  "slug": zod.string().max(catalogProductsListResponseResultsItemSlugMax).regex(catalogProductsListResponseResultsItemSlugRegExp).describe('URL-friendly version of the name'),
  "short_description": zod.string().max(catalogProductsListResponseResultsItemShortDescriptionMax).optional().describe('Short description for listings'),
  "price": zod.string().regex(catalogProductsListResponseResultsItemPriceRegExp).describe('Product price'),
  "original_price": zod.string().regex(catalogProductsListResponseResultsItemOriginalPriceRegExp).describe('Original price for showing discounts'),
  "current_price": zod.number(),
  "discount_percentage": zod.number().describe('Calculate discount percentage.'),
  "sku": zod.string().max(catalogProductsListResponseResultsItemSkuMax).describe('Unique product identifier'),
  "stock_quantity": zod.number().min(catalogProductsListResponseResultsItemStockQuantityMin).max(catalogProductsListResponseResultsItemStockQuantityMax).optional().describe('Available quantity in stock'),
  "status": zod.enum(['draft', 'active', 'inactive', 'out_of_stock']).describe('* `draft` - Draft\n* `active` - Active\n* `inactive` - Inactive\n* `out_of_stock` - Out of Stock').optional().describe('Product status\n\n* `draft` - Draft\n* `active` - Active\n* `inactive` - Inactive\n* `out_of_stock` - Out of Stock'),
  "is_visible": zod.boolean().optional().describe('Is product visible to the users'),
  "is_on_sale": zod.boolean(),
  "is_in_stock": zod.boolean().describe('Check if product is in stock.'),
  "is_available": zod.boolean().describe('Check if product is available for purchase.'),
  "category": zod.object({
  "id": zod.number(),
  "name": zod.string().max(catalogProductsListResponseResultsItemCategoryNameMax).describe('Category name'),
  "slug": zod.string().max(catalogProductsListResponseResultsItemCategorySlugMax).regex(catalogProductsListResponseResultsItemCategorySlugRegExp).describe('URL-friendly version of the name'),
  "description": zod.string().optional().describe('Category description'),
  "is_active": zod.boolean().optional().describe('Whether this category is visible'),
  "active_product_count": zod.number(),
  "created_at": zod.string().datetime({}).describe('Timestamp when the record was created'),
  "updated_at": zod.string().datetime({}).describe('Timestamp when the record was last updated')
}).describe('Serializer for Category model.'),
  "primary_image": zod.string().nullable().describe('Get URL of primary product image.'),
  "created_at": zod.string().datetime({}).describe('Timestamp when the record was created')
}).describe('Simplified serializer for product listings.'))
})

/**
 * ViewSet for Product model with advanced CRUD operations.
 */
export const catalogProductsCreateBodyNameMax = 200;
export const catalogProductsCreateBodySlugMax = 200;

export const catalogProductsCreateBodySlugRegExp = new RegExp('^[-a-zA-Z0-9_]+$');
export const catalogProductsCreateBodyShortDescriptionMax = 500;
export const catalogProductsCreateBodyPriceRegExp = new RegExp('^-?\\d{0,8}(?:\\.\\d{0,2})?$');
export const catalogProductsCreateBodyOriginalPriceRegExp = new RegExp('^-?\\d{0,8}(?:\\.\\d{0,2})?$');
export const catalogProductsCreateBodySkuMax = 100;
export const catalogProductsCreateBodyStockQuantityMin = 0;

export const catalogProductsCreateBodyStockQuantityMax = 2147483647;


export const catalogProductsCreateBody = zod.object({
  "name": zod.string().max(catalogProductsCreateBodyNameMax).describe('Product name'),
  "slug": zod.string().max(catalogProductsCreateBodySlugMax).regex(catalogProductsCreateBodySlugRegExp).describe('URL-friendly version of the name'),
  "description": zod.string().describe('Detailed product description'),
  "short_description": zod.string().max(catalogProductsCreateBodyShortDescriptionMax).optional().describe('Short description for listings'),
  "price": zod.string().regex(catalogProductsCreateBodyPriceRegExp).describe('Product price'),
  "original_price": zod.string().regex(catalogProductsCreateBodyOriginalPriceRegExp).describe('Original price for showing discounts'),
  "sku": zod.string().max(catalogProductsCreateBodySkuMax).describe('Unique product identifier'),
  "stock_quantity": zod.number().min(catalogProductsCreateBodyStockQuantityMin).max(catalogProductsCreateBodyStockQuantityMax).optional().describe('Available quantity in stock'),
  "category_id": zod.number(),
  "tag_ids": zod.array(zod.number()).optional(),
  "status": zod.enum(['draft', 'active', 'inactive', 'out_of_stock']).describe('* `draft` - Draft\n* `active` - Active\n* `inactive` - Inactive\n* `out_of_stock` - Out of Stock').optional().describe('Product status\n\n* `draft` - Draft\n* `active` - Active\n* `inactive` - Inactive\n* `out_of_stock` - Out of Stock'),
  "is_visible": zod.boolean().optional().describe('Is product visible to the users'),
  "sale_start": zod.string().datetime({}).nullish(),
  "sale_end": zod.string().datetime({}).nullish()
}).describe('Serializer for creating products.')

/**
 * ViewSet for Product model with advanced CRUD operations.
 */
export const catalogProductsRetrieveParams = zod.object({
  "id": zod.coerce.number().describe('A unique integer value identifying this product.')
})

export const catalogProductsRetrieveResponseNameMax = 200;
export const catalogProductsRetrieveResponseSlugMax = 200;

export const catalogProductsRetrieveResponseSlugRegExp = new RegExp('^[-a-zA-Z0-9_]+$');
export const catalogProductsRetrieveResponseShortDescriptionMax = 500;
export const catalogProductsRetrieveResponsePriceRegExp = new RegExp('^-?\\d{0,8}(?:\\.\\d{0,2})?$');
export const catalogProductsRetrieveResponseOriginalPriceRegExp = new RegExp('^-?\\d{0,8}(?:\\.\\d{0,2})?$');
export const catalogProductsRetrieveResponseSkuMax = 100;
export const catalogProductsRetrieveResponseStockQuantityMin = 0;

export const catalogProductsRetrieveResponseStockQuantityMax = 2147483647;
export const catalogProductsRetrieveResponseCategoryNameMax = 100;
export const catalogProductsRetrieveResponseCategorySlugMax = 100;

export const catalogProductsRetrieveResponseCategorySlugRegExp = new RegExp('^[-a-zA-Z0-9_]+$');
export const catalogProductsRetrieveResponseTagsItemNameMax = 50;
export const catalogProductsRetrieveResponseTagsItemSlugMax = 50;

export const catalogProductsRetrieveResponseTagsItemSlugRegExp = new RegExp('^[-a-zA-Z0-9_]+$');
export const catalogProductsRetrieveResponseImagesItemAltTextMax = 255;
export const catalogProductsRetrieveResponseImagesItemSortOrderMin = 0;

export const catalogProductsRetrieveResponseImagesItemSortOrderMax = 2147483647;


export const catalogProductsRetrieveResponse = zod.object({
  "id": zod.number(),
  "name": zod.string().max(catalogProductsRetrieveResponseNameMax).describe('Product name'),
  "slug": zod.string().max(catalogProductsRetrieveResponseSlugMax).regex(catalogProductsRetrieveResponseSlugRegExp).describe('URL-friendly version of the name'),
  "description": zod.string().describe('Detailed product description'),
  "short_description": zod.string().max(catalogProductsRetrieveResponseShortDescriptionMax).optional().describe('Short description for listings'),
  "price": zod.string().regex(catalogProductsRetrieveResponsePriceRegExp).describe('Product price'),
  "original_price": zod.string().regex(catalogProductsRetrieveResponseOriginalPriceRegExp).describe('Original price for showing discounts'),
  "current_price": zod.number(),
  "discount_percentage": zod.number().describe('Calculate discount percentage.'),
  "sku": zod.string().max(catalogProductsRetrieveResponseSkuMax).describe('Unique product identifier'),
  "stock_quantity": zod.number().min(catalogProductsRetrieveResponseStockQuantityMin).max(catalogProductsRetrieveResponseStockQuantityMax).optional().describe('Available quantity in stock'),
  "category": zod.object({
  "id": zod.number(),
  "name": zod.string().max(catalogProductsRetrieveResponseCategoryNameMax).describe('Category name'),
  "slug": zod.string().max(catalogProductsRetrieveResponseCategorySlugMax).regex(catalogProductsRetrieveResponseCategorySlugRegExp).describe('URL-friendly version of the name'),
  "description": zod.string().optional().describe('Category description'),
  "is_active": zod.boolean().optional().describe('Whether this category is visible'),
  "active_product_count": zod.number(),
  "created_at": zod.string().datetime({}).describe('Timestamp when the record was created'),
  "updated_at": zod.string().datetime({}).describe('Timestamp when the record was last updated')
}).describe('Serializer for Category model.'),
  "category_id": zod.number(),
  "tags": zod.array(zod.object({
  "id": zod.number(),
  "name": zod.string().max(catalogProductsRetrieveResponseTagsItemNameMax).describe('Tag name'),
  "slug": zod.string().max(catalogProductsRetrieveResponseTagsItemSlugMax).regex(catalogProductsRetrieveResponseTagsItemSlugRegExp).describe('URL-friendly version of the name'),
  "created_at": zod.string().datetime({}).describe('Timestamp when the record was created'),
  "updated_at": zod.string().datetime({}).describe('Timestamp when the record was last updated')
}).describe('Serializer for Tag model.')),
  "tag_ids": zod.array(zod.number()).optional(),
  "status": zod.enum(['draft', 'active', 'inactive', 'out_of_stock']).describe('* `draft` - Draft\n* `active` - Active\n* `inactive` - Inactive\n* `out_of_stock` - Out of Stock').optional().describe('Product status\n\n* `draft` - Draft\n* `active` - Active\n* `inactive` - Inactive\n* `out_of_stock` - Out of Stock'),
  "is_visible": zod.boolean().optional().describe('Is product visible to the users'),
  "sale_start": zod.string().datetime({}).nullish(),
  "sale_end": zod.string().datetime({}).nullish(),
  "is_on_sale": zod.boolean(),
  "is_in_stock": zod.boolean().describe('Check if product is in stock.'),
  "is_available": zod.boolean().describe('Check if product is available for purchase.'),
  "images": zod.array(zod.object({
  "id": zod.number(),
  "image": zod.string().url().describe('Product image'),
  "alt_text": zod.string().max(catalogProductsRetrieveResponseImagesItemAltTextMax).optional().describe('Alternative text for the image'),
  "is_primary": zod.boolean().optional().describe('Whether this is the primary product image'),
  "sort_order": zod.number().min(catalogProductsRetrieveResponseImagesItemSortOrderMin).max(catalogProductsRetrieveResponseImagesItemSortOrderMax).optional().describe('Display order of images'),
  "created_at": zod.string().datetime({}).describe('Timestamp when the record was created'),
  "updated_at": zod.string().datetime({}).describe('Timestamp when the record was last updated')
}).describe('Serializer for ProductImage model.')),
  "created_at": zod.string().datetime({}).describe('Timestamp when the record was created'),
  "updated_at": zod.string().datetime({}).describe('Timestamp when the record was last updated')
}).describe('Detailed serializer for product detail views.')

/**
 * ViewSet for Product model with advanced CRUD operations.
 */
export const catalogProductsUpdateParams = zod.object({
  "id": zod.coerce.number().describe('A unique integer value identifying this product.')
})

export const catalogProductsUpdateBodyNameMax = 200;
export const catalogProductsUpdateBodySlugMax = 200;

export const catalogProductsUpdateBodySlugRegExp = new RegExp('^[-a-zA-Z0-9_]+$');
export const catalogProductsUpdateBodyShortDescriptionMax = 500;
export const catalogProductsUpdateBodyPriceRegExp = new RegExp('^-?\\d{0,8}(?:\\.\\d{0,2})?$');
export const catalogProductsUpdateBodyOriginalPriceRegExp = new RegExp('^-?\\d{0,8}(?:\\.\\d{0,2})?$');
export const catalogProductsUpdateBodySkuMax = 100;
export const catalogProductsUpdateBodyStockQuantityMin = 0;

export const catalogProductsUpdateBodyStockQuantityMax = 2147483647;


export const catalogProductsUpdateBody = zod.object({
  "name": zod.string().max(catalogProductsUpdateBodyNameMax).describe('Product name'),
  "slug": zod.string().max(catalogProductsUpdateBodySlugMax).regex(catalogProductsUpdateBodySlugRegExp).describe('URL-friendly version of the name'),
  "description": zod.string().describe('Detailed product description'),
  "short_description": zod.string().max(catalogProductsUpdateBodyShortDescriptionMax).optional().describe('Short description for listings'),
  "price": zod.string().regex(catalogProductsUpdateBodyPriceRegExp).describe('Product price'),
  "original_price": zod.string().regex(catalogProductsUpdateBodyOriginalPriceRegExp).describe('Original price for showing discounts'),
  "sku": zod.string().max(catalogProductsUpdateBodySkuMax).describe('Unique product identifier'),
  "stock_quantity": zod.number().min(catalogProductsUpdateBodyStockQuantityMin).max(catalogProductsUpdateBodyStockQuantityMax).optional().describe('Available quantity in stock'),
  "category_id": zod.number(),
  "tag_ids": zod.array(zod.number()).optional(),
  "status": zod.enum(['draft', 'active', 'inactive', 'out_of_stock']).describe('* `draft` - Draft\n* `active` - Active\n* `inactive` - Inactive\n* `out_of_stock` - Out of Stock').optional().describe('Product status\n\n* `draft` - Draft\n* `active` - Active\n* `inactive` - Inactive\n* `out_of_stock` - Out of Stock'),
  "is_visible": zod.boolean().optional().describe('Is product visible to the users'),
  "sale_start": zod.string().datetime({}).nullish(),
  "sale_end": zod.string().datetime({}).nullish()
}).describe('Detailed serializer for product detail views.')

export const catalogProductsUpdateResponseNameMax = 200;
export const catalogProductsUpdateResponseSlugMax = 200;

export const catalogProductsUpdateResponseSlugRegExp = new RegExp('^[-a-zA-Z0-9_]+$');
export const catalogProductsUpdateResponseShortDescriptionMax = 500;
export const catalogProductsUpdateResponsePriceRegExp = new RegExp('^-?\\d{0,8}(?:\\.\\d{0,2})?$');
export const catalogProductsUpdateResponseOriginalPriceRegExp = new RegExp('^-?\\d{0,8}(?:\\.\\d{0,2})?$');
export const catalogProductsUpdateResponseSkuMax = 100;
export const catalogProductsUpdateResponseStockQuantityMin = 0;

export const catalogProductsUpdateResponseStockQuantityMax = 2147483647;
export const catalogProductsUpdateResponseCategoryNameMax = 100;
export const catalogProductsUpdateResponseCategorySlugMax = 100;

export const catalogProductsUpdateResponseCategorySlugRegExp = new RegExp('^[-a-zA-Z0-9_]+$');
export const catalogProductsUpdateResponseTagsItemNameMax = 50;
export const catalogProductsUpdateResponseTagsItemSlugMax = 50;

export const catalogProductsUpdateResponseTagsItemSlugRegExp = new RegExp('^[-a-zA-Z0-9_]+$');
export const catalogProductsUpdateResponseImagesItemAltTextMax = 255;
export const catalogProductsUpdateResponseImagesItemSortOrderMin = 0;

export const catalogProductsUpdateResponseImagesItemSortOrderMax = 2147483647;


export const catalogProductsUpdateResponse = zod.object({
  "id": zod.number(),
  "name": zod.string().max(catalogProductsUpdateResponseNameMax).describe('Product name'),
  "slug": zod.string().max(catalogProductsUpdateResponseSlugMax).regex(catalogProductsUpdateResponseSlugRegExp).describe('URL-friendly version of the name'),
  "description": zod.string().describe('Detailed product description'),
  "short_description": zod.string().max(catalogProductsUpdateResponseShortDescriptionMax).optional().describe('Short description for listings'),
  "price": zod.string().regex(catalogProductsUpdateResponsePriceRegExp).describe('Product price'),
  "original_price": zod.string().regex(catalogProductsUpdateResponseOriginalPriceRegExp).describe('Original price for showing discounts'),
  "current_price": zod.number(),
  "discount_percentage": zod.number().describe('Calculate discount percentage.'),
  "sku": zod.string().max(catalogProductsUpdateResponseSkuMax).describe('Unique product identifier'),
  "stock_quantity": zod.number().min(catalogProductsUpdateResponseStockQuantityMin).max(catalogProductsUpdateResponseStockQuantityMax).optional().describe('Available quantity in stock'),
  "category": zod.object({
  "id": zod.number(),
  "name": zod.string().max(catalogProductsUpdateResponseCategoryNameMax).describe('Category name'),
  "slug": zod.string().max(catalogProductsUpdateResponseCategorySlugMax).regex(catalogProductsUpdateResponseCategorySlugRegExp).describe('URL-friendly version of the name'),
  "description": zod.string().optional().describe('Category description'),
  "is_active": zod.boolean().optional().describe('Whether this category is visible'),
  "active_product_count": zod.number(),
  "created_at": zod.string().datetime({}).describe('Timestamp when the record was created'),
  "updated_at": zod.string().datetime({}).describe('Timestamp when the record was last updated')
}).describe('Serializer for Category model.'),
  "category_id": zod.number(),
  "tags": zod.array(zod.object({
  "id": zod.number(),
  "name": zod.string().max(catalogProductsUpdateResponseTagsItemNameMax).describe('Tag name'),
  "slug": zod.string().max(catalogProductsUpdateResponseTagsItemSlugMax).regex(catalogProductsUpdateResponseTagsItemSlugRegExp).describe('URL-friendly version of the name'),
  "created_at": zod.string().datetime({}).describe('Timestamp when the record was created'),
  "updated_at": zod.string().datetime({}).describe('Timestamp when the record was last updated')
}).describe('Serializer for Tag model.')),
  "tag_ids": zod.array(zod.number()).optional(),
  "status": zod.enum(['draft', 'active', 'inactive', 'out_of_stock']).describe('* `draft` - Draft\n* `active` - Active\n* `inactive` - Inactive\n* `out_of_stock` - Out of Stock').optional().describe('Product status\n\n* `draft` - Draft\n* `active` - Active\n* `inactive` - Inactive\n* `out_of_stock` - Out of Stock'),
  "is_visible": zod.boolean().optional().describe('Is product visible to the users'),
  "sale_start": zod.string().datetime({}).nullish(),
  "sale_end": zod.string().datetime({}).nullish(),
  "is_on_sale": zod.boolean(),
  "is_in_stock": zod.boolean().describe('Check if product is in stock.'),
  "is_available": zod.boolean().describe('Check if product is available for purchase.'),
  "images": zod.array(zod.object({
  "id": zod.number(),
  "image": zod.string().url().describe('Product image'),
  "alt_text": zod.string().max(catalogProductsUpdateResponseImagesItemAltTextMax).optional().describe('Alternative text for the image'),
  "is_primary": zod.boolean().optional().describe('Whether this is the primary product image'),
  "sort_order": zod.number().min(catalogProductsUpdateResponseImagesItemSortOrderMin).max(catalogProductsUpdateResponseImagesItemSortOrderMax).optional().describe('Display order of images'),
  "created_at": zod.string().datetime({}).describe('Timestamp when the record was created'),
  "updated_at": zod.string().datetime({}).describe('Timestamp when the record was last updated')
}).describe('Serializer for ProductImage model.')),
  "created_at": zod.string().datetime({}).describe('Timestamp when the record was created'),
  "updated_at": zod.string().datetime({}).describe('Timestamp when the record was last updated')
}).describe('Detailed serializer for product detail views.')

/**
 * ViewSet for Product model with advanced CRUD operations.
 */
export const catalogProductsPartialUpdateParams = zod.object({
  "id": zod.coerce.number().describe('A unique integer value identifying this product.')
})

export const catalogProductsPartialUpdateBodyNameMax = 200;
export const catalogProductsPartialUpdateBodySlugMax = 200;

export const catalogProductsPartialUpdateBodySlugRegExp = new RegExp('^[-a-zA-Z0-9_]+$');
export const catalogProductsPartialUpdateBodyShortDescriptionMax = 500;
export const catalogProductsPartialUpdateBodyPriceRegExp = new RegExp('^-?\\d{0,8}(?:\\.\\d{0,2})?$');
export const catalogProductsPartialUpdateBodyOriginalPriceRegExp = new RegExp('^-?\\d{0,8}(?:\\.\\d{0,2})?$');
export const catalogProductsPartialUpdateBodySkuMax = 100;
export const catalogProductsPartialUpdateBodyStockQuantityMin = 0;

export const catalogProductsPartialUpdateBodyStockQuantityMax = 2147483647;


export const catalogProductsPartialUpdateBody = zod.object({
  "name": zod.string().max(catalogProductsPartialUpdateBodyNameMax).optional().describe('Product name'),
  "slug": zod.string().max(catalogProductsPartialUpdateBodySlugMax).regex(catalogProductsPartialUpdateBodySlugRegExp).optional().describe('URL-friendly version of the name'),
  "description": zod.string().optional().describe('Detailed product description'),
  "short_description": zod.string().max(catalogProductsPartialUpdateBodyShortDescriptionMax).optional().describe('Short description for listings'),
  "price": zod.string().regex(catalogProductsPartialUpdateBodyPriceRegExp).optional().describe('Product price'),
  "original_price": zod.string().regex(catalogProductsPartialUpdateBodyOriginalPriceRegExp).optional().describe('Original price for showing discounts'),
  "sku": zod.string().max(catalogProductsPartialUpdateBodySkuMax).optional().describe('Unique product identifier'),
  "stock_quantity": zod.number().min(catalogProductsPartialUpdateBodyStockQuantityMin).max(catalogProductsPartialUpdateBodyStockQuantityMax).optional().describe('Available quantity in stock'),
  "category_id": zod.number().optional(),
  "tag_ids": zod.array(zod.number()).optional(),
  "status": zod.enum(['draft', 'active', 'inactive', 'out_of_stock']).describe('* `draft` - Draft\n* `active` - Active\n* `inactive` - Inactive\n* `out_of_stock` - Out of Stock').optional().describe('Product status\n\n* `draft` - Draft\n* `active` - Active\n* `inactive` - Inactive\n* `out_of_stock` - Out of Stock'),
  "is_visible": zod.boolean().optional().describe('Is product visible to the users'),
  "sale_start": zod.string().datetime({}).nullish(),
  "sale_end": zod.string().datetime({}).nullish()
}).describe('Detailed serializer for product detail views.')

export const catalogProductsPartialUpdateResponseNameMax = 200;
export const catalogProductsPartialUpdateResponseSlugMax = 200;

export const catalogProductsPartialUpdateResponseSlugRegExp = new RegExp('^[-a-zA-Z0-9_]+$');
export const catalogProductsPartialUpdateResponseShortDescriptionMax = 500;
export const catalogProductsPartialUpdateResponsePriceRegExp = new RegExp('^-?\\d{0,8}(?:\\.\\d{0,2})?$');
export const catalogProductsPartialUpdateResponseOriginalPriceRegExp = new RegExp('^-?\\d{0,8}(?:\\.\\d{0,2})?$');
export const catalogProductsPartialUpdateResponseSkuMax = 100;
export const catalogProductsPartialUpdateResponseStockQuantityMin = 0;

export const catalogProductsPartialUpdateResponseStockQuantityMax = 2147483647;
export const catalogProductsPartialUpdateResponseCategoryNameMax = 100;
export const catalogProductsPartialUpdateResponseCategorySlugMax = 100;

export const catalogProductsPartialUpdateResponseCategorySlugRegExp = new RegExp('^[-a-zA-Z0-9_]+$');
export const catalogProductsPartialUpdateResponseTagsItemNameMax = 50;
export const catalogProductsPartialUpdateResponseTagsItemSlugMax = 50;

export const catalogProductsPartialUpdateResponseTagsItemSlugRegExp = new RegExp('^[-a-zA-Z0-9_]+$');
export const catalogProductsPartialUpdateResponseImagesItemAltTextMax = 255;
export const catalogProductsPartialUpdateResponseImagesItemSortOrderMin = 0;

export const catalogProductsPartialUpdateResponseImagesItemSortOrderMax = 2147483647;


export const catalogProductsPartialUpdateResponse = zod.object({
  "id": zod.number(),
  "name": zod.string().max(catalogProductsPartialUpdateResponseNameMax).describe('Product name'),
  "slug": zod.string().max(catalogProductsPartialUpdateResponseSlugMax).regex(catalogProductsPartialUpdateResponseSlugRegExp).describe('URL-friendly version of the name'),
  "description": zod.string().describe('Detailed product description'),
  "short_description": zod.string().max(catalogProductsPartialUpdateResponseShortDescriptionMax).optional().describe('Short description for listings'),
  "price": zod.string().regex(catalogProductsPartialUpdateResponsePriceRegExp).describe('Product price'),
  "original_price": zod.string().regex(catalogProductsPartialUpdateResponseOriginalPriceRegExp).describe('Original price for showing discounts'),
  "current_price": zod.number(),
  "discount_percentage": zod.number().describe('Calculate discount percentage.'),
  "sku": zod.string().max(catalogProductsPartialUpdateResponseSkuMax).describe('Unique product identifier'),
  "stock_quantity": zod.number().min(catalogProductsPartialUpdateResponseStockQuantityMin).max(catalogProductsPartialUpdateResponseStockQuantityMax).optional().describe('Available quantity in stock'),
  "category": zod.object({
  "id": zod.number(),
  "name": zod.string().max(catalogProductsPartialUpdateResponseCategoryNameMax).describe('Category name'),
  "slug": zod.string().max(catalogProductsPartialUpdateResponseCategorySlugMax).regex(catalogProductsPartialUpdateResponseCategorySlugRegExp).describe('URL-friendly version of the name'),
  "description": zod.string().optional().describe('Category description'),
  "is_active": zod.boolean().optional().describe('Whether this category is visible'),
  "active_product_count": zod.number(),
  "created_at": zod.string().datetime({}).describe('Timestamp when the record was created'),
  "updated_at": zod.string().datetime({}).describe('Timestamp when the record was last updated')
}).describe('Serializer for Category model.'),
  "category_id": zod.number(),
  "tags": zod.array(zod.object({
  "id": zod.number(),
  "name": zod.string().max(catalogProductsPartialUpdateResponseTagsItemNameMax).describe('Tag name'),
  "slug": zod.string().max(catalogProductsPartialUpdateResponseTagsItemSlugMax).regex(catalogProductsPartialUpdateResponseTagsItemSlugRegExp).describe('URL-friendly version of the name'),
  "created_at": zod.string().datetime({}).describe('Timestamp when the record was created'),
  "updated_at": zod.string().datetime({}).describe('Timestamp when the record was last updated')
}).describe('Serializer for Tag model.')),
  "tag_ids": zod.array(zod.number()).optional(),
  "status": zod.enum(['draft', 'active', 'inactive', 'out_of_stock']).describe('* `draft` - Draft\n* `active` - Active\n* `inactive` - Inactive\n* `out_of_stock` - Out of Stock').optional().describe('Product status\n\n* `draft` - Draft\n* `active` - Active\n* `inactive` - Inactive\n* `out_of_stock` - Out of Stock'),
  "is_visible": zod.boolean().optional().describe('Is product visible to the users'),
  "sale_start": zod.string().datetime({}).nullish(),
  "sale_end": zod.string().datetime({}).nullish(),
  "is_on_sale": zod.boolean(),
  "is_in_stock": zod.boolean().describe('Check if product is in stock.'),
  "is_available": zod.boolean().describe('Check if product is available for purchase.'),
  "images": zod.array(zod.object({
  "id": zod.number(),
  "image": zod.string().url().describe('Product image'),
  "alt_text": zod.string().max(catalogProductsPartialUpdateResponseImagesItemAltTextMax).optional().describe('Alternative text for the image'),
  "is_primary": zod.boolean().optional().describe('Whether this is the primary product image'),
  "sort_order": zod.number().min(catalogProductsPartialUpdateResponseImagesItemSortOrderMin).max(catalogProductsPartialUpdateResponseImagesItemSortOrderMax).optional().describe('Display order of images'),
  "created_at": zod.string().datetime({}).describe('Timestamp when the record was created'),
  "updated_at": zod.string().datetime({}).describe('Timestamp when the record was last updated')
}).describe('Serializer for ProductImage model.')),
  "created_at": zod.string().datetime({}).describe('Timestamp when the record was created'),
  "updated_at": zod.string().datetime({}).describe('Timestamp when the record was last updated')
}).describe('Detailed serializer for product detail views.')

/**
 * ViewSet for Product model with advanced CRUD operations.
 */
export const catalogProductsDestroyParams = zod.object({
  "id": zod.coerce.number().describe('A unique integer value identifying this product.')
})

/**
 * Add product to user's wishlist.
 */
export const catalogProductsAddToWishlistCreateParams = zod.object({
  "id": zod.coerce.number().describe('A unique integer value identifying this product.')
})

export const catalogProductsAddToWishlistCreateBodyNameMax = 200;
export const catalogProductsAddToWishlistCreateBodySlugMax = 200;

export const catalogProductsAddToWishlistCreateBodySlugRegExp = new RegExp('^[-a-zA-Z0-9_]+$');
export const catalogProductsAddToWishlistCreateBodyShortDescriptionMax = 500;
export const catalogProductsAddToWishlistCreateBodyPriceRegExp = new RegExp('^-?\\d{0,8}(?:\\.\\d{0,2})?$');
export const catalogProductsAddToWishlistCreateBodyOriginalPriceRegExp = new RegExp('^-?\\d{0,8}(?:\\.\\d{0,2})?$');
export const catalogProductsAddToWishlistCreateBodySkuMax = 100;
export const catalogProductsAddToWishlistCreateBodyStockQuantityMin = 0;

export const catalogProductsAddToWishlistCreateBodyStockQuantityMax = 2147483647;


export const catalogProductsAddToWishlistCreateBody = zod.object({
  "name": zod.string().max(catalogProductsAddToWishlistCreateBodyNameMax).describe('Product name'),
  "slug": zod.string().max(catalogProductsAddToWishlistCreateBodySlugMax).regex(catalogProductsAddToWishlistCreateBodySlugRegExp).describe('URL-friendly version of the name'),
  "description": zod.string().describe('Detailed product description'),
  "short_description": zod.string().max(catalogProductsAddToWishlistCreateBodyShortDescriptionMax).optional().describe('Short description for listings'),
  "price": zod.string().regex(catalogProductsAddToWishlistCreateBodyPriceRegExp).describe('Product price'),
  "original_price": zod.string().regex(catalogProductsAddToWishlistCreateBodyOriginalPriceRegExp).describe('Original price for showing discounts'),
  "sku": zod.string().max(catalogProductsAddToWishlistCreateBodySkuMax).describe('Unique product identifier'),
  "stock_quantity": zod.number().min(catalogProductsAddToWishlistCreateBodyStockQuantityMin).max(catalogProductsAddToWishlistCreateBodyStockQuantityMax).optional().describe('Available quantity in stock'),
  "category_id": zod.number(),
  "tag_ids": zod.array(zod.number()).optional(),
  "status": zod.enum(['draft', 'active', 'inactive', 'out_of_stock']).describe('* `draft` - Draft\n* `active` - Active\n* `inactive` - Inactive\n* `out_of_stock` - Out of Stock').optional().describe('Product status\n\n* `draft` - Draft\n* `active` - Active\n* `inactive` - Inactive\n* `out_of_stock` - Out of Stock'),
  "is_visible": zod.boolean().optional().describe('Is product visible to the users'),
  "sale_start": zod.string().datetime({}).nullish(),
  "sale_end": zod.string().datetime({}).nullish()
}).describe('Detailed serializer for product detail views.')

export const catalogProductsAddToWishlistCreateResponseNameMax = 200;
export const catalogProductsAddToWishlistCreateResponseSlugMax = 200;

export const catalogProductsAddToWishlistCreateResponseSlugRegExp = new RegExp('^[-a-zA-Z0-9_]+$');
export const catalogProductsAddToWishlistCreateResponseShortDescriptionMax = 500;
export const catalogProductsAddToWishlistCreateResponsePriceRegExp = new RegExp('^-?\\d{0,8}(?:\\.\\d{0,2})?$');
export const catalogProductsAddToWishlistCreateResponseOriginalPriceRegExp = new RegExp('^-?\\d{0,8}(?:\\.\\d{0,2})?$');
export const catalogProductsAddToWishlistCreateResponseSkuMax = 100;
export const catalogProductsAddToWishlistCreateResponseStockQuantityMin = 0;

export const catalogProductsAddToWishlistCreateResponseStockQuantityMax = 2147483647;
export const catalogProductsAddToWishlistCreateResponseCategoryNameMax = 100;
export const catalogProductsAddToWishlistCreateResponseCategorySlugMax = 100;

export const catalogProductsAddToWishlistCreateResponseCategorySlugRegExp = new RegExp('^[-a-zA-Z0-9_]+$');
export const catalogProductsAddToWishlistCreateResponseTagsItemNameMax = 50;
export const catalogProductsAddToWishlistCreateResponseTagsItemSlugMax = 50;

export const catalogProductsAddToWishlistCreateResponseTagsItemSlugRegExp = new RegExp('^[-a-zA-Z0-9_]+$');
export const catalogProductsAddToWishlistCreateResponseImagesItemAltTextMax = 255;
export const catalogProductsAddToWishlistCreateResponseImagesItemSortOrderMin = 0;

export const catalogProductsAddToWishlistCreateResponseImagesItemSortOrderMax = 2147483647;


export const catalogProductsAddToWishlistCreateResponse = zod.object({
  "id": zod.number(),
  "name": zod.string().max(catalogProductsAddToWishlistCreateResponseNameMax).describe('Product name'),
  "slug": zod.string().max(catalogProductsAddToWishlistCreateResponseSlugMax).regex(catalogProductsAddToWishlistCreateResponseSlugRegExp).describe('URL-friendly version of the name'),
  "description": zod.string().describe('Detailed product description'),
  "short_description": zod.string().max(catalogProductsAddToWishlistCreateResponseShortDescriptionMax).optional().describe('Short description for listings'),
  "price": zod.string().regex(catalogProductsAddToWishlistCreateResponsePriceRegExp).describe('Product price'),
  "original_price": zod.string().regex(catalogProductsAddToWishlistCreateResponseOriginalPriceRegExp).describe('Original price for showing discounts'),
  "current_price": zod.number(),
  "discount_percentage": zod.number().describe('Calculate discount percentage.'),
  "sku": zod.string().max(catalogProductsAddToWishlistCreateResponseSkuMax).describe('Unique product identifier'),
  "stock_quantity": zod.number().min(catalogProductsAddToWishlistCreateResponseStockQuantityMin).max(catalogProductsAddToWishlistCreateResponseStockQuantityMax).optional().describe('Available quantity in stock'),
  "category": zod.object({
  "id": zod.number(),
  "name": zod.string().max(catalogProductsAddToWishlistCreateResponseCategoryNameMax).describe('Category name'),
  "slug": zod.string().max(catalogProductsAddToWishlistCreateResponseCategorySlugMax).regex(catalogProductsAddToWishlistCreateResponseCategorySlugRegExp).describe('URL-friendly version of the name'),
  "description": zod.string().optional().describe('Category description'),
  "is_active": zod.boolean().optional().describe('Whether this category is visible'),
  "active_product_count": zod.number(),
  "created_at": zod.string().datetime({}).describe('Timestamp when the record was created'),
  "updated_at": zod.string().datetime({}).describe('Timestamp when the record was last updated')
}).describe('Serializer for Category model.'),
  "category_id": zod.number(),
  "tags": zod.array(zod.object({
  "id": zod.number(),
  "name": zod.string().max(catalogProductsAddToWishlistCreateResponseTagsItemNameMax).describe('Tag name'),
  "slug": zod.string().max(catalogProductsAddToWishlistCreateResponseTagsItemSlugMax).regex(catalogProductsAddToWishlistCreateResponseTagsItemSlugRegExp).describe('URL-friendly version of the name'),
  "created_at": zod.string().datetime({}).describe('Timestamp when the record was created'),
  "updated_at": zod.string().datetime({}).describe('Timestamp when the record was last updated')
}).describe('Serializer for Tag model.')),
  "tag_ids": zod.array(zod.number()).optional(),
  "status": zod.enum(['draft', 'active', 'inactive', 'out_of_stock']).describe('* `draft` - Draft\n* `active` - Active\n* `inactive` - Inactive\n* `out_of_stock` - Out of Stock').optional().describe('Product status\n\n* `draft` - Draft\n* `active` - Active\n* `inactive` - Inactive\n* `out_of_stock` - Out of Stock'),
  "is_visible": zod.boolean().optional().describe('Is product visible to the users'),
  "sale_start": zod.string().datetime({}).nullish(),
  "sale_end": zod.string().datetime({}).nullish(),
  "is_on_sale": zod.boolean(),
  "is_in_stock": zod.boolean().describe('Check if product is in stock.'),
  "is_available": zod.boolean().describe('Check if product is available for purchase.'),
  "images": zod.array(zod.object({
  "id": zod.number(),
  "image": zod.string().url().describe('Product image'),
  "alt_text": zod.string().max(catalogProductsAddToWishlistCreateResponseImagesItemAltTextMax).optional().describe('Alternative text for the image'),
  "is_primary": zod.boolean().optional().describe('Whether this is the primary product image'),
  "sort_order": zod.number().min(catalogProductsAddToWishlistCreateResponseImagesItemSortOrderMin).max(catalogProductsAddToWishlistCreateResponseImagesItemSortOrderMax).optional().describe('Display order of images'),
  "created_at": zod.string().datetime({}).describe('Timestamp when the record was created'),
  "updated_at": zod.string().datetime({}).describe('Timestamp when the record was last updated')
}).describe('Serializer for ProductImage model.')),
  "created_at": zod.string().datetime({}).describe('Timestamp when the record was created'),
  "updated_at": zod.string().datetime({}).describe('Timestamp when the record was last updated')
}).describe('Detailed serializer for product detail views.')

/**
 * Get related products based on category and tags.
 */
export const catalogProductsRelatedRetrieveParams = zod.object({
  "id": zod.coerce.number().describe('A unique integer value identifying this product.')
})

export const catalogProductsRelatedRetrieveResponseNameMax = 200;
export const catalogProductsRelatedRetrieveResponseSlugMax = 200;

export const catalogProductsRelatedRetrieveResponseSlugRegExp = new RegExp('^[-a-zA-Z0-9_]+$');
export const catalogProductsRelatedRetrieveResponseShortDescriptionMax = 500;
export const catalogProductsRelatedRetrieveResponsePriceRegExp = new RegExp('^-?\\d{0,8}(?:\\.\\d{0,2})?$');
export const catalogProductsRelatedRetrieveResponseOriginalPriceRegExp = new RegExp('^-?\\d{0,8}(?:\\.\\d{0,2})?$');
export const catalogProductsRelatedRetrieveResponseSkuMax = 100;
export const catalogProductsRelatedRetrieveResponseStockQuantityMin = 0;

export const catalogProductsRelatedRetrieveResponseStockQuantityMax = 2147483647;
export const catalogProductsRelatedRetrieveResponseCategoryNameMax = 100;
export const catalogProductsRelatedRetrieveResponseCategorySlugMax = 100;

export const catalogProductsRelatedRetrieveResponseCategorySlugRegExp = new RegExp('^[-a-zA-Z0-9_]+$');
export const catalogProductsRelatedRetrieveResponseTagsItemNameMax = 50;
export const catalogProductsRelatedRetrieveResponseTagsItemSlugMax = 50;

export const catalogProductsRelatedRetrieveResponseTagsItemSlugRegExp = new RegExp('^[-a-zA-Z0-9_]+$');
export const catalogProductsRelatedRetrieveResponseImagesItemAltTextMax = 255;
export const catalogProductsRelatedRetrieveResponseImagesItemSortOrderMin = 0;

export const catalogProductsRelatedRetrieveResponseImagesItemSortOrderMax = 2147483647;


export const catalogProductsRelatedRetrieveResponse = zod.object({
  "id": zod.number(),
  "name": zod.string().max(catalogProductsRelatedRetrieveResponseNameMax).describe('Product name'),
  "slug": zod.string().max(catalogProductsRelatedRetrieveResponseSlugMax).regex(catalogProductsRelatedRetrieveResponseSlugRegExp).describe('URL-friendly version of the name'),
  "description": zod.string().describe('Detailed product description'),
  "short_description": zod.string().max(catalogProductsRelatedRetrieveResponseShortDescriptionMax).optional().describe('Short description for listings'),
  "price": zod.string().regex(catalogProductsRelatedRetrieveResponsePriceRegExp).describe('Product price'),
  "original_price": zod.string().regex(catalogProductsRelatedRetrieveResponseOriginalPriceRegExp).describe('Original price for showing discounts'),
  "current_price": zod.number(),
  "discount_percentage": zod.number().describe('Calculate discount percentage.'),
  "sku": zod.string().max(catalogProductsRelatedRetrieveResponseSkuMax).describe('Unique product identifier'),
  "stock_quantity": zod.number().min(catalogProductsRelatedRetrieveResponseStockQuantityMin).max(catalogProductsRelatedRetrieveResponseStockQuantityMax).optional().describe('Available quantity in stock'),
  "category": zod.object({
  "id": zod.number(),
  "name": zod.string().max(catalogProductsRelatedRetrieveResponseCategoryNameMax).describe('Category name'),
  "slug": zod.string().max(catalogProductsRelatedRetrieveResponseCategorySlugMax).regex(catalogProductsRelatedRetrieveResponseCategorySlugRegExp).describe('URL-friendly version of the name'),
  "description": zod.string().optional().describe('Category description'),
  "is_active": zod.boolean().optional().describe('Whether this category is visible'),
  "active_product_count": zod.number(),
  "created_at": zod.string().datetime({}).describe('Timestamp when the record was created'),
  "updated_at": zod.string().datetime({}).describe('Timestamp when the record was last updated')
}).describe('Serializer for Category model.'),
  "category_id": zod.number(),
  "tags": zod.array(zod.object({
  "id": zod.number(),
  "name": zod.string().max(catalogProductsRelatedRetrieveResponseTagsItemNameMax).describe('Tag name'),
  "slug": zod.string().max(catalogProductsRelatedRetrieveResponseTagsItemSlugMax).regex(catalogProductsRelatedRetrieveResponseTagsItemSlugRegExp).describe('URL-friendly version of the name'),
  "created_at": zod.string().datetime({}).describe('Timestamp when the record was created'),
  "updated_at": zod.string().datetime({}).describe('Timestamp when the record was last updated')
}).describe('Serializer for Tag model.')),
  "tag_ids": zod.array(zod.number()).optional(),
  "status": zod.enum(['draft', 'active', 'inactive', 'out_of_stock']).describe('* `draft` - Draft\n* `active` - Active\n* `inactive` - Inactive\n* `out_of_stock` - Out of Stock').optional().describe('Product status\n\n* `draft` - Draft\n* `active` - Active\n* `inactive` - Inactive\n* `out_of_stock` - Out of Stock'),
  "is_visible": zod.boolean().optional().describe('Is product visible to the users'),
  "sale_start": zod.string().datetime({}).nullish(),
  "sale_end": zod.string().datetime({}).nullish(),
  "is_on_sale": zod.boolean(),
  "is_in_stock": zod.boolean().describe('Check if product is in stock.'),
  "is_available": zod.boolean().describe('Check if product is available for purchase.'),
  "images": zod.array(zod.object({
  "id": zod.number(),
  "image": zod.string().url().describe('Product image'),
  "alt_text": zod.string().max(catalogProductsRelatedRetrieveResponseImagesItemAltTextMax).optional().describe('Alternative text for the image'),
  "is_primary": zod.boolean().optional().describe('Whether this is the primary product image'),
  "sort_order": zod.number().min(catalogProductsRelatedRetrieveResponseImagesItemSortOrderMin).max(catalogProductsRelatedRetrieveResponseImagesItemSortOrderMax).optional().describe('Display order of images'),
  "created_at": zod.string().datetime({}).describe('Timestamp when the record was created'),
  "updated_at": zod.string().datetime({}).describe('Timestamp when the record was last updated')
}).describe('Serializer for ProductImage model.')),
  "created_at": zod.string().datetime({}).describe('Timestamp when the record was created'),
  "updated_at": zod.string().datetime({}).describe('Timestamp when the record was last updated')
}).describe('Detailed serializer for product detail views.')

/**
 * Get products currently on sale.
 */
export const catalogProductsOnSaleRetrieveResponseNameMax = 200;
export const catalogProductsOnSaleRetrieveResponseSlugMax = 200;

export const catalogProductsOnSaleRetrieveResponseSlugRegExp = new RegExp('^[-a-zA-Z0-9_]+$');
export const catalogProductsOnSaleRetrieveResponseShortDescriptionMax = 500;
export const catalogProductsOnSaleRetrieveResponsePriceRegExp = new RegExp('^-?\\d{0,8}(?:\\.\\d{0,2})?$');
export const catalogProductsOnSaleRetrieveResponseOriginalPriceRegExp = new RegExp('^-?\\d{0,8}(?:\\.\\d{0,2})?$');
export const catalogProductsOnSaleRetrieveResponseSkuMax = 100;
export const catalogProductsOnSaleRetrieveResponseStockQuantityMin = 0;

export const catalogProductsOnSaleRetrieveResponseStockQuantityMax = 2147483647;
export const catalogProductsOnSaleRetrieveResponseCategoryNameMax = 100;
export const catalogProductsOnSaleRetrieveResponseCategorySlugMax = 100;

export const catalogProductsOnSaleRetrieveResponseCategorySlugRegExp = new RegExp('^[-a-zA-Z0-9_]+$');
export const catalogProductsOnSaleRetrieveResponseTagsItemNameMax = 50;
export const catalogProductsOnSaleRetrieveResponseTagsItemSlugMax = 50;

export const catalogProductsOnSaleRetrieveResponseTagsItemSlugRegExp = new RegExp('^[-a-zA-Z0-9_]+$');
export const catalogProductsOnSaleRetrieveResponseImagesItemAltTextMax = 255;
export const catalogProductsOnSaleRetrieveResponseImagesItemSortOrderMin = 0;

export const catalogProductsOnSaleRetrieveResponseImagesItemSortOrderMax = 2147483647;


export const catalogProductsOnSaleRetrieveResponse = zod.object({
  "id": zod.number(),
  "name": zod.string().max(catalogProductsOnSaleRetrieveResponseNameMax).describe('Product name'),
  "slug": zod.string().max(catalogProductsOnSaleRetrieveResponseSlugMax).regex(catalogProductsOnSaleRetrieveResponseSlugRegExp).describe('URL-friendly version of the name'),
  "description": zod.string().describe('Detailed product description'),
  "short_description": zod.string().max(catalogProductsOnSaleRetrieveResponseShortDescriptionMax).optional().describe('Short description for listings'),
  "price": zod.string().regex(catalogProductsOnSaleRetrieveResponsePriceRegExp).describe('Product price'),
  "original_price": zod.string().regex(catalogProductsOnSaleRetrieveResponseOriginalPriceRegExp).describe('Original price for showing discounts'),
  "current_price": zod.number(),
  "discount_percentage": zod.number().describe('Calculate discount percentage.'),
  "sku": zod.string().max(catalogProductsOnSaleRetrieveResponseSkuMax).describe('Unique product identifier'),
  "stock_quantity": zod.number().min(catalogProductsOnSaleRetrieveResponseStockQuantityMin).max(catalogProductsOnSaleRetrieveResponseStockQuantityMax).optional().describe('Available quantity in stock'),
  "category": zod.object({
  "id": zod.number(),
  "name": zod.string().max(catalogProductsOnSaleRetrieveResponseCategoryNameMax).describe('Category name'),
  "slug": zod.string().max(catalogProductsOnSaleRetrieveResponseCategorySlugMax).regex(catalogProductsOnSaleRetrieveResponseCategorySlugRegExp).describe('URL-friendly version of the name'),
  "description": zod.string().optional().describe('Category description'),
  "is_active": zod.boolean().optional().describe('Whether this category is visible'),
  "active_product_count": zod.number(),
  "created_at": zod.string().datetime({}).describe('Timestamp when the record was created'),
  "updated_at": zod.string().datetime({}).describe('Timestamp when the record was last updated')
}).describe('Serializer for Category model.'),
  "category_id": zod.number(),
  "tags": zod.array(zod.object({
  "id": zod.number(),
  "name": zod.string().max(catalogProductsOnSaleRetrieveResponseTagsItemNameMax).describe('Tag name'),
  "slug": zod.string().max(catalogProductsOnSaleRetrieveResponseTagsItemSlugMax).regex(catalogProductsOnSaleRetrieveResponseTagsItemSlugRegExp).describe('URL-friendly version of the name'),
  "created_at": zod.string().datetime({}).describe('Timestamp when the record was created'),
  "updated_at": zod.string().datetime({}).describe('Timestamp when the record was last updated')
}).describe('Serializer for Tag model.')),
  "tag_ids": zod.array(zod.number()).optional(),
  "status": zod.enum(['draft', 'active', 'inactive', 'out_of_stock']).describe('* `draft` - Draft\n* `active` - Active\n* `inactive` - Inactive\n* `out_of_stock` - Out of Stock').optional().describe('Product status\n\n* `draft` - Draft\n* `active` - Active\n* `inactive` - Inactive\n* `out_of_stock` - Out of Stock'),
  "is_visible": zod.boolean().optional().describe('Is product visible to the users'),
  "sale_start": zod.string().datetime({}).nullish(),
  "sale_end": zod.string().datetime({}).nullish(),
  "is_on_sale": zod.boolean(),
  "is_in_stock": zod.boolean().describe('Check if product is in stock.'),
  "is_available": zod.boolean().describe('Check if product is available for purchase.'),
  "images": zod.array(zod.object({
  "id": zod.number(),
  "image": zod.string().url().describe('Product image'),
  "alt_text": zod.string().max(catalogProductsOnSaleRetrieveResponseImagesItemAltTextMax).optional().describe('Alternative text for the image'),
  "is_primary": zod.boolean().optional().describe('Whether this is the primary product image'),
  "sort_order": zod.number().min(catalogProductsOnSaleRetrieveResponseImagesItemSortOrderMin).max(catalogProductsOnSaleRetrieveResponseImagesItemSortOrderMax).optional().describe('Display order of images'),
  "created_at": zod.string().datetime({}).describe('Timestamp when the record was created'),
  "updated_at": zod.string().datetime({}).describe('Timestamp when the record was last updated')
}).describe('Serializer for ProductImage model.')),
  "created_at": zod.string().datetime({}).describe('Timestamp when the record was created'),
  "updated_at": zod.string().datetime({}).describe('Timestamp when the record was last updated')
}).describe('Detailed serializer for product detail views.')

/**
 * ViewSet for Tag model with CRUD operations.
 */
export const catalogTagsListQueryParams = zod.object({
  "ordering": zod.coerce.string().optional().describe('Which field to use when ordering the results.'),
  "page": zod.coerce.number().optional().describe('A page number within the paginated result set.'),
  "search": zod.coerce.string().optional().describe('A search term.')
})

export const catalogTagsListResponseResultsItemNameMax = 50;
export const catalogTagsListResponseResultsItemSlugMax = 50;

export const catalogTagsListResponseResultsItemSlugRegExp = new RegExp('^[-a-zA-Z0-9_]+$');


export const catalogTagsListResponse = zod.object({
  "count": zod.number(),
  "next": zod.string().url().nullish(),
  "previous": zod.string().url().nullish(),
  "results": zod.array(zod.object({
  "id": zod.number(),
  "name": zod.string().max(catalogTagsListResponseResultsItemNameMax).describe('Tag name'),
  "slug": zod.string().max(catalogTagsListResponseResultsItemSlugMax).regex(catalogTagsListResponseResultsItemSlugRegExp).describe('URL-friendly version of the name'),
  "created_at": zod.string().datetime({}).describe('Timestamp when the record was created'),
  "updated_at": zod.string().datetime({}).describe('Timestamp when the record was last updated')
}).describe('Serializer for Tag model.'))
})

/**
 * ViewSet for Tag model with CRUD operations.
 */
export const catalogTagsCreateBodyNameMax = 50;
export const catalogTagsCreateBodySlugMax = 50;

export const catalogTagsCreateBodySlugRegExp = new RegExp('^[-a-zA-Z0-9_]+$');


export const catalogTagsCreateBody = zod.object({
  "name": zod.string().max(catalogTagsCreateBodyNameMax).describe('Tag name'),
  "slug": zod.string().max(catalogTagsCreateBodySlugMax).regex(catalogTagsCreateBodySlugRegExp).describe('URL-friendly version of the name')
}).describe('Serializer for Tag model.')

/**
 * ViewSet for Tag model with CRUD operations.
 */
export const catalogTagsRetrieveParams = zod.object({
  "id": zod.coerce.number().describe('A unique integer value identifying this tag.')
})

export const catalogTagsRetrieveResponseNameMax = 50;
export const catalogTagsRetrieveResponseSlugMax = 50;

export const catalogTagsRetrieveResponseSlugRegExp = new RegExp('^[-a-zA-Z0-9_]+$');


export const catalogTagsRetrieveResponse = zod.object({
  "id": zod.number(),
  "name": zod.string().max(catalogTagsRetrieveResponseNameMax).describe('Tag name'),
  "slug": zod.string().max(catalogTagsRetrieveResponseSlugMax).regex(catalogTagsRetrieveResponseSlugRegExp).describe('URL-friendly version of the name'),
  "created_at": zod.string().datetime({}).describe('Timestamp when the record was created'),
  "updated_at": zod.string().datetime({}).describe('Timestamp when the record was last updated')
}).describe('Serializer for Tag model.')

/**
 * ViewSet for Tag model with CRUD operations.
 */
export const catalogTagsUpdateParams = zod.object({
  "id": zod.coerce.number().describe('A unique integer value identifying this tag.')
})

export const catalogTagsUpdateBodyNameMax = 50;
export const catalogTagsUpdateBodySlugMax = 50;

export const catalogTagsUpdateBodySlugRegExp = new RegExp('^[-a-zA-Z0-9_]+$');


export const catalogTagsUpdateBody = zod.object({
  "name": zod.string().max(catalogTagsUpdateBodyNameMax).describe('Tag name'),
  "slug": zod.string().max(catalogTagsUpdateBodySlugMax).regex(catalogTagsUpdateBodySlugRegExp).describe('URL-friendly version of the name')
}).describe('Serializer for Tag model.')

export const catalogTagsUpdateResponseNameMax = 50;
export const catalogTagsUpdateResponseSlugMax = 50;

export const catalogTagsUpdateResponseSlugRegExp = new RegExp('^[-a-zA-Z0-9_]+$');


export const catalogTagsUpdateResponse = zod.object({
  "id": zod.number(),
  "name": zod.string().max(catalogTagsUpdateResponseNameMax).describe('Tag name'),
  "slug": zod.string().max(catalogTagsUpdateResponseSlugMax).regex(catalogTagsUpdateResponseSlugRegExp).describe('URL-friendly version of the name'),
  "created_at": zod.string().datetime({}).describe('Timestamp when the record was created'),
  "updated_at": zod.string().datetime({}).describe('Timestamp when the record was last updated')
}).describe('Serializer for Tag model.')

/**
 * ViewSet for Tag model with CRUD operations.
 */
export const catalogTagsPartialUpdateParams = zod.object({
  "id": zod.coerce.number().describe('A unique integer value identifying this tag.')
})

export const catalogTagsPartialUpdateBodyNameMax = 50;
export const catalogTagsPartialUpdateBodySlugMax = 50;

export const catalogTagsPartialUpdateBodySlugRegExp = new RegExp('^[-a-zA-Z0-9_]+$');


export const catalogTagsPartialUpdateBody = zod.object({
  "name": zod.string().max(catalogTagsPartialUpdateBodyNameMax).optional().describe('Tag name'),
  "slug": zod.string().max(catalogTagsPartialUpdateBodySlugMax).regex(catalogTagsPartialUpdateBodySlugRegExp).optional().describe('URL-friendly version of the name')
}).describe('Serializer for Tag model.')

export const catalogTagsPartialUpdateResponseNameMax = 50;
export const catalogTagsPartialUpdateResponseSlugMax = 50;

export const catalogTagsPartialUpdateResponseSlugRegExp = new RegExp('^[-a-zA-Z0-9_]+$');


export const catalogTagsPartialUpdateResponse = zod.object({
  "id": zod.number(),
  "name": zod.string().max(catalogTagsPartialUpdateResponseNameMax).describe('Tag name'),
  "slug": zod.string().max(catalogTagsPartialUpdateResponseSlugMax).regex(catalogTagsPartialUpdateResponseSlugRegExp).describe('URL-friendly version of the name'),
  "created_at": zod.string().datetime({}).describe('Timestamp when the record was created'),
  "updated_at": zod.string().datetime({}).describe('Timestamp when the record was last updated')
}).describe('Serializer for Tag model.')

/**
 * ViewSet for Tag model with CRUD operations.
 */
export const catalogTagsDestroyParams = zod.object({
  "id": zod.coerce.number().describe('A unique integer value identifying this tag.')
})

/**
 * Get all products with this tag.
 */
export const catalogTagsProductsRetrieveParams = zod.object({
  "id": zod.coerce.number().describe('A unique integer value identifying this tag.')
})

export const catalogTagsProductsRetrieveResponseNameMax = 50;
export const catalogTagsProductsRetrieveResponseSlugMax = 50;

export const catalogTagsProductsRetrieveResponseSlugRegExp = new RegExp('^[-a-zA-Z0-9_]+$');


export const catalogTagsProductsRetrieveResponse = zod.object({
  "id": zod.number(),
  "name": zod.string().max(catalogTagsProductsRetrieveResponseNameMax).describe('Tag name'),
  "slug": zod.string().max(catalogTagsProductsRetrieveResponseSlugMax).regex(catalogTagsProductsRetrieveResponseSlugRegExp).describe('URL-friendly version of the name'),
  "created_at": zod.string().datetime({}).describe('Timestamp when the record was created'),
  "updated_at": zod.string().datetime({}).describe('Timestamp when the record was last updated')
}).describe('Serializer for Tag model.')

