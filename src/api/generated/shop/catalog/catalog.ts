/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * ShopDjango API
 * API for ShopDjango project
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  CatalogCategoriesListParams,
  CatalogImagesListParams,
  CatalogProductsListParams,
  CatalogTagsListParams,
  Category,
  PaginatedCategoryList,
  PaginatedProductImageList,
  PaginatedProductListList,
  PaginatedTagList,
  PatchedCategory,
  PatchedProductDetail,
  PatchedProductImage,
  PatchedTag,
  ProductCreate,
  ProductDetail,
  ProductImage,
  Tag
} from '.././schemas';

import { shopInstance } from '../../../shop-mutator';

// https://stackoverflow.com/questions/49579094/typescript-conditional-types-filter-out-readonly-properties-pick-only-requir/49579497#49579497
type IfEquals<X, Y, A = X, B = never> = (<T>() => T extends X ? 1 : 2) extends <
T,
>() => T extends Y ? 1 : 2
? A
: B;

type WritableKeys<T> = {
[P in keyof T]-?: IfEquals<
  { [Q in P]: T[P] },
  { -readonly [Q in P]: T[P] },
  P
>;
}[keyof T];

type UnionToIntersection<U> =
  (U extends any ? (k: U)=>void : never) extends ((k: infer I)=>void) ? I : never;
type DistributeReadOnlyOverUnions<T> = T extends any ? NonReadonly<T> : never;

type Writable<T> = Pick<T, WritableKeys<T>>;
type NonReadonly<T> = [T] extends [UnionToIntersection<T>] ? {
  [P in keyof Writable<T>]: T[P] extends object
    ? NonReadonly<NonNullable<T[P]>>
    : T[P];
} : DistributeReadOnlyOverUnions<T>;





/**
 * ViewSet for Category model with CRUD operations.
 */
export const catalogCategoriesList = (
    params?: CatalogCategoriesListParams,
 signal?: AbortSignal
) => {
      
      
      return shopInstance<PaginatedCategoryList>(
      {url: `/api/catalog/categories/`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getCatalogCategoriesListQueryKey = (params?: CatalogCategoriesListParams,) => {
    return [`/api/catalog/categories/`, ...(params ? [params]: [])] as const;
    }

    
export const getCatalogCategoriesListQueryOptions = <TData = Awaited<ReturnType<typeof catalogCategoriesList>>, TError = unknown>(params?: CatalogCategoriesListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof catalogCategoriesList>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getCatalogCategoriesListQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof catalogCategoriesList>>> = ({ signal }) => catalogCategoriesList(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof catalogCategoriesList>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type CatalogCategoriesListQueryResult = NonNullable<Awaited<ReturnType<typeof catalogCategoriesList>>>
export type CatalogCategoriesListQueryError = unknown


export function useCatalogCategoriesList<TData = Awaited<ReturnType<typeof catalogCategoriesList>>, TError = unknown>(
 params: undefined |  CatalogCategoriesListParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof catalogCategoriesList>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof catalogCategoriesList>>,
          TError,
          Awaited<ReturnType<typeof catalogCategoriesList>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useCatalogCategoriesList<TData = Awaited<ReturnType<typeof catalogCategoriesList>>, TError = unknown>(
 params?: CatalogCategoriesListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof catalogCategoriesList>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof catalogCategoriesList>>,
          TError,
          Awaited<ReturnType<typeof catalogCategoriesList>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useCatalogCategoriesList<TData = Awaited<ReturnType<typeof catalogCategoriesList>>, TError = unknown>(
 params?: CatalogCategoriesListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof catalogCategoriesList>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useCatalogCategoriesList<TData = Awaited<ReturnType<typeof catalogCategoriesList>>, TError = unknown>(
 params?: CatalogCategoriesListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof catalogCategoriesList>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getCatalogCategoriesListQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * ViewSet for Category model with CRUD operations.
 */
export const catalogCategoriesCreate = (
    category: NonReadonly<Category>,
 signal?: AbortSignal
) => {
      
      
      return shopInstance<Category>(
      {url: `/api/catalog/categories/`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: category, signal
    },
      );
    }
  


export const getCatalogCategoriesCreateMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof catalogCategoriesCreate>>, TError,{data: NonReadonly<Category>}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof catalogCategoriesCreate>>, TError,{data: NonReadonly<Category>}, TContext> => {

const mutationKey = ['catalogCategoriesCreate'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof catalogCategoriesCreate>>, {data: NonReadonly<Category>}> = (props) => {
          const {data} = props ?? {};

          return  catalogCategoriesCreate(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CatalogCategoriesCreateMutationResult = NonNullable<Awaited<ReturnType<typeof catalogCategoriesCreate>>>
    export type CatalogCategoriesCreateMutationBody = NonReadonly<Category>
    export type CatalogCategoriesCreateMutationError = unknown

    export const useCatalogCategoriesCreate = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof catalogCategoriesCreate>>, TError,{data: NonReadonly<Category>}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof catalogCategoriesCreate>>,
        TError,
        {data: NonReadonly<Category>},
        TContext
      > => {

      const mutationOptions = getCatalogCategoriesCreateMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * ViewSet for Category model with CRUD operations.
 */
export const catalogCategoriesRetrieve = (
    id: number,
 signal?: AbortSignal
) => {
      
      
      return shopInstance<Category>(
      {url: `/api/catalog/categories/${id}/`, method: 'GET', signal
    },
      );
    }
  

export const getCatalogCategoriesRetrieveQueryKey = (id: number,) => {
    return [`/api/catalog/categories/${id}/`] as const;
    }

    
export const getCatalogCategoriesRetrieveQueryOptions = <TData = Awaited<ReturnType<typeof catalogCategoriesRetrieve>>, TError = unknown>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof catalogCategoriesRetrieve>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getCatalogCategoriesRetrieveQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof catalogCategoriesRetrieve>>> = ({ signal }) => catalogCategoriesRetrieve(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof catalogCategoriesRetrieve>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type CatalogCategoriesRetrieveQueryResult = NonNullable<Awaited<ReturnType<typeof catalogCategoriesRetrieve>>>
export type CatalogCategoriesRetrieveQueryError = unknown


export function useCatalogCategoriesRetrieve<TData = Awaited<ReturnType<typeof catalogCategoriesRetrieve>>, TError = unknown>(
 id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof catalogCategoriesRetrieve>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof catalogCategoriesRetrieve>>,
          TError,
          Awaited<ReturnType<typeof catalogCategoriesRetrieve>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useCatalogCategoriesRetrieve<TData = Awaited<ReturnType<typeof catalogCategoriesRetrieve>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof catalogCategoriesRetrieve>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof catalogCategoriesRetrieve>>,
          TError,
          Awaited<ReturnType<typeof catalogCategoriesRetrieve>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useCatalogCategoriesRetrieve<TData = Awaited<ReturnType<typeof catalogCategoriesRetrieve>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof catalogCategoriesRetrieve>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useCatalogCategoriesRetrieve<TData = Awaited<ReturnType<typeof catalogCategoriesRetrieve>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof catalogCategoriesRetrieve>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getCatalogCategoriesRetrieveQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * ViewSet for Category model with CRUD operations.
 */
export const catalogCategoriesUpdate = (
    id: number,
    category: NonReadonly<Category>,
 ) => {
      
      
      return shopInstance<Category>(
      {url: `/api/catalog/categories/${id}/`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: category
    },
      );
    }
  


export const getCatalogCategoriesUpdateMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof catalogCategoriesUpdate>>, TError,{id: number;data: NonReadonly<Category>}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof catalogCategoriesUpdate>>, TError,{id: number;data: NonReadonly<Category>}, TContext> => {

const mutationKey = ['catalogCategoriesUpdate'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof catalogCategoriesUpdate>>, {id: number;data: NonReadonly<Category>}> = (props) => {
          const {id,data} = props ?? {};

          return  catalogCategoriesUpdate(id,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CatalogCategoriesUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof catalogCategoriesUpdate>>>
    export type CatalogCategoriesUpdateMutationBody = NonReadonly<Category>
    export type CatalogCategoriesUpdateMutationError = unknown

    export const useCatalogCategoriesUpdate = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof catalogCategoriesUpdate>>, TError,{id: number;data: NonReadonly<Category>}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof catalogCategoriesUpdate>>,
        TError,
        {id: number;data: NonReadonly<Category>},
        TContext
      > => {

      const mutationOptions = getCatalogCategoriesUpdateMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * ViewSet for Category model with CRUD operations.
 */
export const catalogCategoriesPartialUpdate = (
    id: number,
    patchedCategory: NonReadonly<PatchedCategory>,
 ) => {
      
      
      return shopInstance<Category>(
      {url: `/api/catalog/categories/${id}/`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: patchedCategory
    },
      );
    }
  


export const getCatalogCategoriesPartialUpdateMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof catalogCategoriesPartialUpdate>>, TError,{id: number;data: NonReadonly<PatchedCategory>}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof catalogCategoriesPartialUpdate>>, TError,{id: number;data: NonReadonly<PatchedCategory>}, TContext> => {

const mutationKey = ['catalogCategoriesPartialUpdate'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof catalogCategoriesPartialUpdate>>, {id: number;data: NonReadonly<PatchedCategory>}> = (props) => {
          const {id,data} = props ?? {};

          return  catalogCategoriesPartialUpdate(id,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CatalogCategoriesPartialUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof catalogCategoriesPartialUpdate>>>
    export type CatalogCategoriesPartialUpdateMutationBody = NonReadonly<PatchedCategory>
    export type CatalogCategoriesPartialUpdateMutationError = unknown

    export const useCatalogCategoriesPartialUpdate = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof catalogCategoriesPartialUpdate>>, TError,{id: number;data: NonReadonly<PatchedCategory>}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof catalogCategoriesPartialUpdate>>,
        TError,
        {id: number;data: NonReadonly<PatchedCategory>},
        TContext
      > => {

      const mutationOptions = getCatalogCategoriesPartialUpdateMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * ViewSet for Category model with CRUD operations.
 */
export const catalogCategoriesDestroy = (
    id: number,
 ) => {
      
      
      return shopInstance<void>(
      {url: `/api/catalog/categories/${id}/`, method: 'DELETE'
    },
      );
    }
  


export const getCatalogCategoriesDestroyMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof catalogCategoriesDestroy>>, TError,{id: number}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof catalogCategoriesDestroy>>, TError,{id: number}, TContext> => {

const mutationKey = ['catalogCategoriesDestroy'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof catalogCategoriesDestroy>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  catalogCategoriesDestroy(id,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CatalogCategoriesDestroyMutationResult = NonNullable<Awaited<ReturnType<typeof catalogCategoriesDestroy>>>
    
    export type CatalogCategoriesDestroyMutationError = unknown

    export const useCatalogCategoriesDestroy = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof catalogCategoriesDestroy>>, TError,{id: number}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof catalogCategoriesDestroy>>,
        TError,
        {id: number},
        TContext
      > => {

      const mutationOptions = getCatalogCategoriesDestroyMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * Get all products in this category.
 */
export const catalogCategoriesProductsRetrieve = (
    id: number,
 signal?: AbortSignal
) => {
      
      
      return shopInstance<Category>(
      {url: `/api/catalog/categories/${id}/products/`, method: 'GET', signal
    },
      );
    }
  

export const getCatalogCategoriesProductsRetrieveQueryKey = (id: number,) => {
    return [`/api/catalog/categories/${id}/products/`] as const;
    }

    
export const getCatalogCategoriesProductsRetrieveQueryOptions = <TData = Awaited<ReturnType<typeof catalogCategoriesProductsRetrieve>>, TError = unknown>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof catalogCategoriesProductsRetrieve>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getCatalogCategoriesProductsRetrieveQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof catalogCategoriesProductsRetrieve>>> = ({ signal }) => catalogCategoriesProductsRetrieve(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof catalogCategoriesProductsRetrieve>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type CatalogCategoriesProductsRetrieveQueryResult = NonNullable<Awaited<ReturnType<typeof catalogCategoriesProductsRetrieve>>>
export type CatalogCategoriesProductsRetrieveQueryError = unknown


export function useCatalogCategoriesProductsRetrieve<TData = Awaited<ReturnType<typeof catalogCategoriesProductsRetrieve>>, TError = unknown>(
 id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof catalogCategoriesProductsRetrieve>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof catalogCategoriesProductsRetrieve>>,
          TError,
          Awaited<ReturnType<typeof catalogCategoriesProductsRetrieve>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useCatalogCategoriesProductsRetrieve<TData = Awaited<ReturnType<typeof catalogCategoriesProductsRetrieve>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof catalogCategoriesProductsRetrieve>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof catalogCategoriesProductsRetrieve>>,
          TError,
          Awaited<ReturnType<typeof catalogCategoriesProductsRetrieve>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useCatalogCategoriesProductsRetrieve<TData = Awaited<ReturnType<typeof catalogCategoriesProductsRetrieve>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof catalogCategoriesProductsRetrieve>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useCatalogCategoriesProductsRetrieve<TData = Awaited<ReturnType<typeof catalogCategoriesProductsRetrieve>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof catalogCategoriesProductsRetrieve>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getCatalogCategoriesProductsRetrieveQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * ViewSet for ProductImage model with CRUD operations.
 */
export const catalogImagesList = (
    params?: CatalogImagesListParams,
 signal?: AbortSignal
) => {
      
      
      return shopInstance<PaginatedProductImageList>(
      {url: `/api/catalog/images/`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getCatalogImagesListQueryKey = (params?: CatalogImagesListParams,) => {
    return [`/api/catalog/images/`, ...(params ? [params]: [])] as const;
    }

    
export const getCatalogImagesListQueryOptions = <TData = Awaited<ReturnType<typeof catalogImagesList>>, TError = unknown>(params?: CatalogImagesListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof catalogImagesList>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getCatalogImagesListQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof catalogImagesList>>> = ({ signal }) => catalogImagesList(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof catalogImagesList>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type CatalogImagesListQueryResult = NonNullable<Awaited<ReturnType<typeof catalogImagesList>>>
export type CatalogImagesListQueryError = unknown


export function useCatalogImagesList<TData = Awaited<ReturnType<typeof catalogImagesList>>, TError = unknown>(
 params: undefined |  CatalogImagesListParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof catalogImagesList>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof catalogImagesList>>,
          TError,
          Awaited<ReturnType<typeof catalogImagesList>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useCatalogImagesList<TData = Awaited<ReturnType<typeof catalogImagesList>>, TError = unknown>(
 params?: CatalogImagesListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof catalogImagesList>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof catalogImagesList>>,
          TError,
          Awaited<ReturnType<typeof catalogImagesList>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useCatalogImagesList<TData = Awaited<ReturnType<typeof catalogImagesList>>, TError = unknown>(
 params?: CatalogImagesListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof catalogImagesList>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useCatalogImagesList<TData = Awaited<ReturnType<typeof catalogImagesList>>, TError = unknown>(
 params?: CatalogImagesListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof catalogImagesList>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getCatalogImagesListQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * ViewSet for ProductImage model with CRUD operations.
 */
export const catalogImagesCreate = (
    productImage: NonReadonly<ProductImage>,
 signal?: AbortSignal
) => {
      
      
      return shopInstance<ProductImage>(
      {url: `/api/catalog/images/`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: productImage, signal
    },
      );
    }
  


export const getCatalogImagesCreateMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof catalogImagesCreate>>, TError,{data: NonReadonly<ProductImage>}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof catalogImagesCreate>>, TError,{data: NonReadonly<ProductImage>}, TContext> => {

const mutationKey = ['catalogImagesCreate'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof catalogImagesCreate>>, {data: NonReadonly<ProductImage>}> = (props) => {
          const {data} = props ?? {};

          return  catalogImagesCreate(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CatalogImagesCreateMutationResult = NonNullable<Awaited<ReturnType<typeof catalogImagesCreate>>>
    export type CatalogImagesCreateMutationBody = NonReadonly<ProductImage>
    export type CatalogImagesCreateMutationError = unknown

    export const useCatalogImagesCreate = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof catalogImagesCreate>>, TError,{data: NonReadonly<ProductImage>}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof catalogImagesCreate>>,
        TError,
        {data: NonReadonly<ProductImage>},
        TContext
      > => {

      const mutationOptions = getCatalogImagesCreateMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * ViewSet for ProductImage model with CRUD operations.
 */
export const catalogImagesRetrieve = (
    id: number,
 signal?: AbortSignal
) => {
      
      
      return shopInstance<ProductImage>(
      {url: `/api/catalog/images/${id}/`, method: 'GET', signal
    },
      );
    }
  

export const getCatalogImagesRetrieveQueryKey = (id: number,) => {
    return [`/api/catalog/images/${id}/`] as const;
    }

    
export const getCatalogImagesRetrieveQueryOptions = <TData = Awaited<ReturnType<typeof catalogImagesRetrieve>>, TError = unknown>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof catalogImagesRetrieve>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getCatalogImagesRetrieveQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof catalogImagesRetrieve>>> = ({ signal }) => catalogImagesRetrieve(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof catalogImagesRetrieve>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type CatalogImagesRetrieveQueryResult = NonNullable<Awaited<ReturnType<typeof catalogImagesRetrieve>>>
export type CatalogImagesRetrieveQueryError = unknown


export function useCatalogImagesRetrieve<TData = Awaited<ReturnType<typeof catalogImagesRetrieve>>, TError = unknown>(
 id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof catalogImagesRetrieve>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof catalogImagesRetrieve>>,
          TError,
          Awaited<ReturnType<typeof catalogImagesRetrieve>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useCatalogImagesRetrieve<TData = Awaited<ReturnType<typeof catalogImagesRetrieve>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof catalogImagesRetrieve>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof catalogImagesRetrieve>>,
          TError,
          Awaited<ReturnType<typeof catalogImagesRetrieve>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useCatalogImagesRetrieve<TData = Awaited<ReturnType<typeof catalogImagesRetrieve>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof catalogImagesRetrieve>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useCatalogImagesRetrieve<TData = Awaited<ReturnType<typeof catalogImagesRetrieve>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof catalogImagesRetrieve>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getCatalogImagesRetrieveQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * ViewSet for ProductImage model with CRUD operations.
 */
export const catalogImagesUpdate = (
    id: number,
    productImage: NonReadonly<ProductImage>,
 ) => {
      
      
      return shopInstance<ProductImage>(
      {url: `/api/catalog/images/${id}/`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: productImage
    },
      );
    }
  


export const getCatalogImagesUpdateMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof catalogImagesUpdate>>, TError,{id: number;data: NonReadonly<ProductImage>}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof catalogImagesUpdate>>, TError,{id: number;data: NonReadonly<ProductImage>}, TContext> => {

const mutationKey = ['catalogImagesUpdate'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof catalogImagesUpdate>>, {id: number;data: NonReadonly<ProductImage>}> = (props) => {
          const {id,data} = props ?? {};

          return  catalogImagesUpdate(id,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CatalogImagesUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof catalogImagesUpdate>>>
    export type CatalogImagesUpdateMutationBody = NonReadonly<ProductImage>
    export type CatalogImagesUpdateMutationError = unknown

    export const useCatalogImagesUpdate = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof catalogImagesUpdate>>, TError,{id: number;data: NonReadonly<ProductImage>}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof catalogImagesUpdate>>,
        TError,
        {id: number;data: NonReadonly<ProductImage>},
        TContext
      > => {

      const mutationOptions = getCatalogImagesUpdateMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * ViewSet for ProductImage model with CRUD operations.
 */
export const catalogImagesPartialUpdate = (
    id: number,
    patchedProductImage: NonReadonly<PatchedProductImage>,
 ) => {
      
      
      return shopInstance<ProductImage>(
      {url: `/api/catalog/images/${id}/`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: patchedProductImage
    },
      );
    }
  


export const getCatalogImagesPartialUpdateMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof catalogImagesPartialUpdate>>, TError,{id: number;data: NonReadonly<PatchedProductImage>}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof catalogImagesPartialUpdate>>, TError,{id: number;data: NonReadonly<PatchedProductImage>}, TContext> => {

const mutationKey = ['catalogImagesPartialUpdate'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof catalogImagesPartialUpdate>>, {id: number;data: NonReadonly<PatchedProductImage>}> = (props) => {
          const {id,data} = props ?? {};

          return  catalogImagesPartialUpdate(id,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CatalogImagesPartialUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof catalogImagesPartialUpdate>>>
    export type CatalogImagesPartialUpdateMutationBody = NonReadonly<PatchedProductImage>
    export type CatalogImagesPartialUpdateMutationError = unknown

    export const useCatalogImagesPartialUpdate = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof catalogImagesPartialUpdate>>, TError,{id: number;data: NonReadonly<PatchedProductImage>}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof catalogImagesPartialUpdate>>,
        TError,
        {id: number;data: NonReadonly<PatchedProductImage>},
        TContext
      > => {

      const mutationOptions = getCatalogImagesPartialUpdateMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * ViewSet for ProductImage model with CRUD operations.
 */
export const catalogImagesDestroy = (
    id: number,
 ) => {
      
      
      return shopInstance<void>(
      {url: `/api/catalog/images/${id}/`, method: 'DELETE'
    },
      );
    }
  


export const getCatalogImagesDestroyMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof catalogImagesDestroy>>, TError,{id: number}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof catalogImagesDestroy>>, TError,{id: number}, TContext> => {

const mutationKey = ['catalogImagesDestroy'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof catalogImagesDestroy>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  catalogImagesDestroy(id,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CatalogImagesDestroyMutationResult = NonNullable<Awaited<ReturnType<typeof catalogImagesDestroy>>>
    
    export type CatalogImagesDestroyMutationError = unknown

    export const useCatalogImagesDestroy = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof catalogImagesDestroy>>, TError,{id: number}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof catalogImagesDestroy>>,
        TError,
        {id: number},
        TContext
      > => {

      const mutationOptions = getCatalogImagesDestroyMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * Set this image as primary for its product.
 */
export const catalogImagesSetPrimaryCreate = (
    id: number,
    productImage: NonReadonly<ProductImage>,
 signal?: AbortSignal
) => {
      
      
      return shopInstance<ProductImage>(
      {url: `/api/catalog/images/${id}/set_primary/`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: productImage, signal
    },
      );
    }
  


export const getCatalogImagesSetPrimaryCreateMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof catalogImagesSetPrimaryCreate>>, TError,{id: number;data: NonReadonly<ProductImage>}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof catalogImagesSetPrimaryCreate>>, TError,{id: number;data: NonReadonly<ProductImage>}, TContext> => {

const mutationKey = ['catalogImagesSetPrimaryCreate'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof catalogImagesSetPrimaryCreate>>, {id: number;data: NonReadonly<ProductImage>}> = (props) => {
          const {id,data} = props ?? {};

          return  catalogImagesSetPrimaryCreate(id,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CatalogImagesSetPrimaryCreateMutationResult = NonNullable<Awaited<ReturnType<typeof catalogImagesSetPrimaryCreate>>>
    export type CatalogImagesSetPrimaryCreateMutationBody = NonReadonly<ProductImage>
    export type CatalogImagesSetPrimaryCreateMutationError = unknown

    export const useCatalogImagesSetPrimaryCreate = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof catalogImagesSetPrimaryCreate>>, TError,{id: number;data: NonReadonly<ProductImage>}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof catalogImagesSetPrimaryCreate>>,
        TError,
        {id: number;data: NonReadonly<ProductImage>},
        TContext
      > => {

      const mutationOptions = getCatalogImagesSetPrimaryCreateMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * ViewSet for Product model with advanced CRUD operations.
 */
export const catalogProductsList = (
    params?: CatalogProductsListParams,
 signal?: AbortSignal
) => {
      
      
      return shopInstance<PaginatedProductListList>(
      {url: `/api/catalog/products/`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getCatalogProductsListQueryKey = (params?: CatalogProductsListParams,) => {
    return [`/api/catalog/products/`, ...(params ? [params]: [])] as const;
    }

    
export const getCatalogProductsListQueryOptions = <TData = Awaited<ReturnType<typeof catalogProductsList>>, TError = unknown>(params?: CatalogProductsListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof catalogProductsList>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getCatalogProductsListQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof catalogProductsList>>> = ({ signal }) => catalogProductsList(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof catalogProductsList>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type CatalogProductsListQueryResult = NonNullable<Awaited<ReturnType<typeof catalogProductsList>>>
export type CatalogProductsListQueryError = unknown


export function useCatalogProductsList<TData = Awaited<ReturnType<typeof catalogProductsList>>, TError = unknown>(
 params: undefined |  CatalogProductsListParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof catalogProductsList>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof catalogProductsList>>,
          TError,
          Awaited<ReturnType<typeof catalogProductsList>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useCatalogProductsList<TData = Awaited<ReturnType<typeof catalogProductsList>>, TError = unknown>(
 params?: CatalogProductsListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof catalogProductsList>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof catalogProductsList>>,
          TError,
          Awaited<ReturnType<typeof catalogProductsList>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useCatalogProductsList<TData = Awaited<ReturnType<typeof catalogProductsList>>, TError = unknown>(
 params?: CatalogProductsListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof catalogProductsList>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useCatalogProductsList<TData = Awaited<ReturnType<typeof catalogProductsList>>, TError = unknown>(
 params?: CatalogProductsListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof catalogProductsList>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getCatalogProductsListQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * ViewSet for Product model with advanced CRUD operations.
 */
export const catalogProductsCreate = (
    productCreate: ProductCreate,
 signal?: AbortSignal
) => {
      
      
      return shopInstance<ProductCreate>(
      {url: `/api/catalog/products/`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: productCreate, signal
    },
      );
    }
  


export const getCatalogProductsCreateMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof catalogProductsCreate>>, TError,{data: ProductCreate}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof catalogProductsCreate>>, TError,{data: ProductCreate}, TContext> => {

const mutationKey = ['catalogProductsCreate'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof catalogProductsCreate>>, {data: ProductCreate}> = (props) => {
          const {data} = props ?? {};

          return  catalogProductsCreate(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CatalogProductsCreateMutationResult = NonNullable<Awaited<ReturnType<typeof catalogProductsCreate>>>
    export type CatalogProductsCreateMutationBody = ProductCreate
    export type CatalogProductsCreateMutationError = unknown

    export const useCatalogProductsCreate = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof catalogProductsCreate>>, TError,{data: ProductCreate}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof catalogProductsCreate>>,
        TError,
        {data: ProductCreate},
        TContext
      > => {

      const mutationOptions = getCatalogProductsCreateMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * ViewSet for Product model with advanced CRUD operations.
 */
export const catalogProductsRetrieve = (
    id: number,
 signal?: AbortSignal
) => {
      
      
      return shopInstance<ProductDetail>(
      {url: `/api/catalog/products/${id}/`, method: 'GET', signal
    },
      );
    }
  

export const getCatalogProductsRetrieveQueryKey = (id: number,) => {
    return [`/api/catalog/products/${id}/`] as const;
    }

    
export const getCatalogProductsRetrieveQueryOptions = <TData = Awaited<ReturnType<typeof catalogProductsRetrieve>>, TError = unknown>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof catalogProductsRetrieve>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getCatalogProductsRetrieveQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof catalogProductsRetrieve>>> = ({ signal }) => catalogProductsRetrieve(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof catalogProductsRetrieve>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type CatalogProductsRetrieveQueryResult = NonNullable<Awaited<ReturnType<typeof catalogProductsRetrieve>>>
export type CatalogProductsRetrieveQueryError = unknown


export function useCatalogProductsRetrieve<TData = Awaited<ReturnType<typeof catalogProductsRetrieve>>, TError = unknown>(
 id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof catalogProductsRetrieve>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof catalogProductsRetrieve>>,
          TError,
          Awaited<ReturnType<typeof catalogProductsRetrieve>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useCatalogProductsRetrieve<TData = Awaited<ReturnType<typeof catalogProductsRetrieve>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof catalogProductsRetrieve>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof catalogProductsRetrieve>>,
          TError,
          Awaited<ReturnType<typeof catalogProductsRetrieve>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useCatalogProductsRetrieve<TData = Awaited<ReturnType<typeof catalogProductsRetrieve>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof catalogProductsRetrieve>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useCatalogProductsRetrieve<TData = Awaited<ReturnType<typeof catalogProductsRetrieve>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof catalogProductsRetrieve>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getCatalogProductsRetrieveQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * ViewSet for Product model with advanced CRUD operations.
 */
export const catalogProductsUpdate = (
    id: number,
    productDetail: NonReadonly<ProductDetail>,
 ) => {
      
      
      return shopInstance<ProductDetail>(
      {url: `/api/catalog/products/${id}/`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: productDetail
    },
      );
    }
  


export const getCatalogProductsUpdateMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof catalogProductsUpdate>>, TError,{id: number;data: NonReadonly<ProductDetail>}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof catalogProductsUpdate>>, TError,{id: number;data: NonReadonly<ProductDetail>}, TContext> => {

const mutationKey = ['catalogProductsUpdate'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof catalogProductsUpdate>>, {id: number;data: NonReadonly<ProductDetail>}> = (props) => {
          const {id,data} = props ?? {};

          return  catalogProductsUpdate(id,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CatalogProductsUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof catalogProductsUpdate>>>
    export type CatalogProductsUpdateMutationBody = NonReadonly<ProductDetail>
    export type CatalogProductsUpdateMutationError = unknown

    export const useCatalogProductsUpdate = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof catalogProductsUpdate>>, TError,{id: number;data: NonReadonly<ProductDetail>}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof catalogProductsUpdate>>,
        TError,
        {id: number;data: NonReadonly<ProductDetail>},
        TContext
      > => {

      const mutationOptions = getCatalogProductsUpdateMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * ViewSet for Product model with advanced CRUD operations.
 */
export const catalogProductsPartialUpdate = (
    id: number,
    patchedProductDetail: NonReadonly<PatchedProductDetail>,
 ) => {
      
      
      return shopInstance<ProductDetail>(
      {url: `/api/catalog/products/${id}/`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: patchedProductDetail
    },
      );
    }
  


export const getCatalogProductsPartialUpdateMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof catalogProductsPartialUpdate>>, TError,{id: number;data: NonReadonly<PatchedProductDetail>}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof catalogProductsPartialUpdate>>, TError,{id: number;data: NonReadonly<PatchedProductDetail>}, TContext> => {

const mutationKey = ['catalogProductsPartialUpdate'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof catalogProductsPartialUpdate>>, {id: number;data: NonReadonly<PatchedProductDetail>}> = (props) => {
          const {id,data} = props ?? {};

          return  catalogProductsPartialUpdate(id,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CatalogProductsPartialUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof catalogProductsPartialUpdate>>>
    export type CatalogProductsPartialUpdateMutationBody = NonReadonly<PatchedProductDetail>
    export type CatalogProductsPartialUpdateMutationError = unknown

    export const useCatalogProductsPartialUpdate = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof catalogProductsPartialUpdate>>, TError,{id: number;data: NonReadonly<PatchedProductDetail>}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof catalogProductsPartialUpdate>>,
        TError,
        {id: number;data: NonReadonly<PatchedProductDetail>},
        TContext
      > => {

      const mutationOptions = getCatalogProductsPartialUpdateMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * ViewSet for Product model with advanced CRUD operations.
 */
export const catalogProductsDestroy = (
    id: number,
 ) => {
      
      
      return shopInstance<void>(
      {url: `/api/catalog/products/${id}/`, method: 'DELETE'
    },
      );
    }
  


export const getCatalogProductsDestroyMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof catalogProductsDestroy>>, TError,{id: number}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof catalogProductsDestroy>>, TError,{id: number}, TContext> => {

const mutationKey = ['catalogProductsDestroy'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof catalogProductsDestroy>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  catalogProductsDestroy(id,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CatalogProductsDestroyMutationResult = NonNullable<Awaited<ReturnType<typeof catalogProductsDestroy>>>
    
    export type CatalogProductsDestroyMutationError = unknown

    export const useCatalogProductsDestroy = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof catalogProductsDestroy>>, TError,{id: number}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof catalogProductsDestroy>>,
        TError,
        {id: number},
        TContext
      > => {

      const mutationOptions = getCatalogProductsDestroyMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * Add product to user's wishlist.
 */
export const catalogProductsAddToWishlistCreate = (
    id: number,
    productDetail: NonReadonly<ProductDetail>,
 signal?: AbortSignal
) => {
      
      
      return shopInstance<ProductDetail>(
      {url: `/api/catalog/products/${id}/add_to_wishlist/`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: productDetail, signal
    },
      );
    }
  


export const getCatalogProductsAddToWishlistCreateMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof catalogProductsAddToWishlistCreate>>, TError,{id: number;data: NonReadonly<ProductDetail>}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof catalogProductsAddToWishlistCreate>>, TError,{id: number;data: NonReadonly<ProductDetail>}, TContext> => {

const mutationKey = ['catalogProductsAddToWishlistCreate'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof catalogProductsAddToWishlistCreate>>, {id: number;data: NonReadonly<ProductDetail>}> = (props) => {
          const {id,data} = props ?? {};

          return  catalogProductsAddToWishlistCreate(id,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CatalogProductsAddToWishlistCreateMutationResult = NonNullable<Awaited<ReturnType<typeof catalogProductsAddToWishlistCreate>>>
    export type CatalogProductsAddToWishlistCreateMutationBody = NonReadonly<ProductDetail>
    export type CatalogProductsAddToWishlistCreateMutationError = unknown

    export const useCatalogProductsAddToWishlistCreate = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof catalogProductsAddToWishlistCreate>>, TError,{id: number;data: NonReadonly<ProductDetail>}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof catalogProductsAddToWishlistCreate>>,
        TError,
        {id: number;data: NonReadonly<ProductDetail>},
        TContext
      > => {

      const mutationOptions = getCatalogProductsAddToWishlistCreateMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * Get related products based on category and tags.
 */
export const catalogProductsRelatedRetrieve = (
    id: number,
 signal?: AbortSignal
) => {
      
      
      return shopInstance<ProductDetail>(
      {url: `/api/catalog/products/${id}/related/`, method: 'GET', signal
    },
      );
    }
  

export const getCatalogProductsRelatedRetrieveQueryKey = (id: number,) => {
    return [`/api/catalog/products/${id}/related/`] as const;
    }

    
export const getCatalogProductsRelatedRetrieveQueryOptions = <TData = Awaited<ReturnType<typeof catalogProductsRelatedRetrieve>>, TError = unknown>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof catalogProductsRelatedRetrieve>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getCatalogProductsRelatedRetrieveQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof catalogProductsRelatedRetrieve>>> = ({ signal }) => catalogProductsRelatedRetrieve(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof catalogProductsRelatedRetrieve>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type CatalogProductsRelatedRetrieveQueryResult = NonNullable<Awaited<ReturnType<typeof catalogProductsRelatedRetrieve>>>
export type CatalogProductsRelatedRetrieveQueryError = unknown


export function useCatalogProductsRelatedRetrieve<TData = Awaited<ReturnType<typeof catalogProductsRelatedRetrieve>>, TError = unknown>(
 id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof catalogProductsRelatedRetrieve>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof catalogProductsRelatedRetrieve>>,
          TError,
          Awaited<ReturnType<typeof catalogProductsRelatedRetrieve>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useCatalogProductsRelatedRetrieve<TData = Awaited<ReturnType<typeof catalogProductsRelatedRetrieve>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof catalogProductsRelatedRetrieve>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof catalogProductsRelatedRetrieve>>,
          TError,
          Awaited<ReturnType<typeof catalogProductsRelatedRetrieve>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useCatalogProductsRelatedRetrieve<TData = Awaited<ReturnType<typeof catalogProductsRelatedRetrieve>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof catalogProductsRelatedRetrieve>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useCatalogProductsRelatedRetrieve<TData = Awaited<ReturnType<typeof catalogProductsRelatedRetrieve>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof catalogProductsRelatedRetrieve>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getCatalogProductsRelatedRetrieveQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Get products currently on sale.
 */
export const catalogProductsOnSaleRetrieve = (
    
 signal?: AbortSignal
) => {
      
      
      return shopInstance<ProductDetail>(
      {url: `/api/catalog/products/on_sale/`, method: 'GET', signal
    },
      );
    }
  

export const getCatalogProductsOnSaleRetrieveQueryKey = () => {
    return [`/api/catalog/products/on_sale/`] as const;
    }

    
export const getCatalogProductsOnSaleRetrieveQueryOptions = <TData = Awaited<ReturnType<typeof catalogProductsOnSaleRetrieve>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof catalogProductsOnSaleRetrieve>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getCatalogProductsOnSaleRetrieveQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof catalogProductsOnSaleRetrieve>>> = ({ signal }) => catalogProductsOnSaleRetrieve(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof catalogProductsOnSaleRetrieve>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type CatalogProductsOnSaleRetrieveQueryResult = NonNullable<Awaited<ReturnType<typeof catalogProductsOnSaleRetrieve>>>
export type CatalogProductsOnSaleRetrieveQueryError = unknown


export function useCatalogProductsOnSaleRetrieve<TData = Awaited<ReturnType<typeof catalogProductsOnSaleRetrieve>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof catalogProductsOnSaleRetrieve>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof catalogProductsOnSaleRetrieve>>,
          TError,
          Awaited<ReturnType<typeof catalogProductsOnSaleRetrieve>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useCatalogProductsOnSaleRetrieve<TData = Awaited<ReturnType<typeof catalogProductsOnSaleRetrieve>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof catalogProductsOnSaleRetrieve>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof catalogProductsOnSaleRetrieve>>,
          TError,
          Awaited<ReturnType<typeof catalogProductsOnSaleRetrieve>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useCatalogProductsOnSaleRetrieve<TData = Awaited<ReturnType<typeof catalogProductsOnSaleRetrieve>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof catalogProductsOnSaleRetrieve>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useCatalogProductsOnSaleRetrieve<TData = Awaited<ReturnType<typeof catalogProductsOnSaleRetrieve>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof catalogProductsOnSaleRetrieve>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getCatalogProductsOnSaleRetrieveQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * ViewSet for Tag model with CRUD operations.
 */
export const catalogTagsList = (
    params?: CatalogTagsListParams,
 signal?: AbortSignal
) => {
      
      
      return shopInstance<PaginatedTagList>(
      {url: `/api/catalog/tags/`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getCatalogTagsListQueryKey = (params?: CatalogTagsListParams,) => {
    return [`/api/catalog/tags/`, ...(params ? [params]: [])] as const;
    }

    
export const getCatalogTagsListQueryOptions = <TData = Awaited<ReturnType<typeof catalogTagsList>>, TError = unknown>(params?: CatalogTagsListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof catalogTagsList>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getCatalogTagsListQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof catalogTagsList>>> = ({ signal }) => catalogTagsList(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof catalogTagsList>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type CatalogTagsListQueryResult = NonNullable<Awaited<ReturnType<typeof catalogTagsList>>>
export type CatalogTagsListQueryError = unknown


export function useCatalogTagsList<TData = Awaited<ReturnType<typeof catalogTagsList>>, TError = unknown>(
 params: undefined |  CatalogTagsListParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof catalogTagsList>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof catalogTagsList>>,
          TError,
          Awaited<ReturnType<typeof catalogTagsList>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useCatalogTagsList<TData = Awaited<ReturnType<typeof catalogTagsList>>, TError = unknown>(
 params?: CatalogTagsListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof catalogTagsList>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof catalogTagsList>>,
          TError,
          Awaited<ReturnType<typeof catalogTagsList>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useCatalogTagsList<TData = Awaited<ReturnType<typeof catalogTagsList>>, TError = unknown>(
 params?: CatalogTagsListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof catalogTagsList>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useCatalogTagsList<TData = Awaited<ReturnType<typeof catalogTagsList>>, TError = unknown>(
 params?: CatalogTagsListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof catalogTagsList>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getCatalogTagsListQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * ViewSet for Tag model with CRUD operations.
 */
export const catalogTagsCreate = (
    tag: NonReadonly<Tag>,
 signal?: AbortSignal
) => {
      
      
      return shopInstance<Tag>(
      {url: `/api/catalog/tags/`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: tag, signal
    },
      );
    }
  


export const getCatalogTagsCreateMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof catalogTagsCreate>>, TError,{data: NonReadonly<Tag>}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof catalogTagsCreate>>, TError,{data: NonReadonly<Tag>}, TContext> => {

const mutationKey = ['catalogTagsCreate'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof catalogTagsCreate>>, {data: NonReadonly<Tag>}> = (props) => {
          const {data} = props ?? {};

          return  catalogTagsCreate(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CatalogTagsCreateMutationResult = NonNullable<Awaited<ReturnType<typeof catalogTagsCreate>>>
    export type CatalogTagsCreateMutationBody = NonReadonly<Tag>
    export type CatalogTagsCreateMutationError = unknown

    export const useCatalogTagsCreate = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof catalogTagsCreate>>, TError,{data: NonReadonly<Tag>}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof catalogTagsCreate>>,
        TError,
        {data: NonReadonly<Tag>},
        TContext
      > => {

      const mutationOptions = getCatalogTagsCreateMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * ViewSet for Tag model with CRUD operations.
 */
export const catalogTagsRetrieve = (
    id: number,
 signal?: AbortSignal
) => {
      
      
      return shopInstance<Tag>(
      {url: `/api/catalog/tags/${id}/`, method: 'GET', signal
    },
      );
    }
  

export const getCatalogTagsRetrieveQueryKey = (id: number,) => {
    return [`/api/catalog/tags/${id}/`] as const;
    }

    
export const getCatalogTagsRetrieveQueryOptions = <TData = Awaited<ReturnType<typeof catalogTagsRetrieve>>, TError = unknown>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof catalogTagsRetrieve>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getCatalogTagsRetrieveQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof catalogTagsRetrieve>>> = ({ signal }) => catalogTagsRetrieve(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof catalogTagsRetrieve>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type CatalogTagsRetrieveQueryResult = NonNullable<Awaited<ReturnType<typeof catalogTagsRetrieve>>>
export type CatalogTagsRetrieveQueryError = unknown


export function useCatalogTagsRetrieve<TData = Awaited<ReturnType<typeof catalogTagsRetrieve>>, TError = unknown>(
 id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof catalogTagsRetrieve>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof catalogTagsRetrieve>>,
          TError,
          Awaited<ReturnType<typeof catalogTagsRetrieve>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useCatalogTagsRetrieve<TData = Awaited<ReturnType<typeof catalogTagsRetrieve>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof catalogTagsRetrieve>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof catalogTagsRetrieve>>,
          TError,
          Awaited<ReturnType<typeof catalogTagsRetrieve>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useCatalogTagsRetrieve<TData = Awaited<ReturnType<typeof catalogTagsRetrieve>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof catalogTagsRetrieve>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useCatalogTagsRetrieve<TData = Awaited<ReturnType<typeof catalogTagsRetrieve>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof catalogTagsRetrieve>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getCatalogTagsRetrieveQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * ViewSet for Tag model with CRUD operations.
 */
export const catalogTagsUpdate = (
    id: number,
    tag: NonReadonly<Tag>,
 ) => {
      
      
      return shopInstance<Tag>(
      {url: `/api/catalog/tags/${id}/`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: tag
    },
      );
    }
  


export const getCatalogTagsUpdateMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof catalogTagsUpdate>>, TError,{id: number;data: NonReadonly<Tag>}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof catalogTagsUpdate>>, TError,{id: number;data: NonReadonly<Tag>}, TContext> => {

const mutationKey = ['catalogTagsUpdate'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof catalogTagsUpdate>>, {id: number;data: NonReadonly<Tag>}> = (props) => {
          const {id,data} = props ?? {};

          return  catalogTagsUpdate(id,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CatalogTagsUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof catalogTagsUpdate>>>
    export type CatalogTagsUpdateMutationBody = NonReadonly<Tag>
    export type CatalogTagsUpdateMutationError = unknown

    export const useCatalogTagsUpdate = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof catalogTagsUpdate>>, TError,{id: number;data: NonReadonly<Tag>}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof catalogTagsUpdate>>,
        TError,
        {id: number;data: NonReadonly<Tag>},
        TContext
      > => {

      const mutationOptions = getCatalogTagsUpdateMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * ViewSet for Tag model with CRUD operations.
 */
export const catalogTagsPartialUpdate = (
    id: number,
    patchedTag: NonReadonly<PatchedTag>,
 ) => {
      
      
      return shopInstance<Tag>(
      {url: `/api/catalog/tags/${id}/`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: patchedTag
    },
      );
    }
  


export const getCatalogTagsPartialUpdateMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof catalogTagsPartialUpdate>>, TError,{id: number;data: NonReadonly<PatchedTag>}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof catalogTagsPartialUpdate>>, TError,{id: number;data: NonReadonly<PatchedTag>}, TContext> => {

const mutationKey = ['catalogTagsPartialUpdate'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof catalogTagsPartialUpdate>>, {id: number;data: NonReadonly<PatchedTag>}> = (props) => {
          const {id,data} = props ?? {};

          return  catalogTagsPartialUpdate(id,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CatalogTagsPartialUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof catalogTagsPartialUpdate>>>
    export type CatalogTagsPartialUpdateMutationBody = NonReadonly<PatchedTag>
    export type CatalogTagsPartialUpdateMutationError = unknown

    export const useCatalogTagsPartialUpdate = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof catalogTagsPartialUpdate>>, TError,{id: number;data: NonReadonly<PatchedTag>}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof catalogTagsPartialUpdate>>,
        TError,
        {id: number;data: NonReadonly<PatchedTag>},
        TContext
      > => {

      const mutationOptions = getCatalogTagsPartialUpdateMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * ViewSet for Tag model with CRUD operations.
 */
export const catalogTagsDestroy = (
    id: number,
 ) => {
      
      
      return shopInstance<void>(
      {url: `/api/catalog/tags/${id}/`, method: 'DELETE'
    },
      );
    }
  


export const getCatalogTagsDestroyMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof catalogTagsDestroy>>, TError,{id: number}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof catalogTagsDestroy>>, TError,{id: number}, TContext> => {

const mutationKey = ['catalogTagsDestroy'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof catalogTagsDestroy>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  catalogTagsDestroy(id,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CatalogTagsDestroyMutationResult = NonNullable<Awaited<ReturnType<typeof catalogTagsDestroy>>>
    
    export type CatalogTagsDestroyMutationError = unknown

    export const useCatalogTagsDestroy = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof catalogTagsDestroy>>, TError,{id: number}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof catalogTagsDestroy>>,
        TError,
        {id: number},
        TContext
      > => {

      const mutationOptions = getCatalogTagsDestroyMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * Get all products with this tag.
 */
export const catalogTagsProductsRetrieve = (
    id: number,
 signal?: AbortSignal
) => {
      
      
      return shopInstance<Tag>(
      {url: `/api/catalog/tags/${id}/products/`, method: 'GET', signal
    },
      );
    }
  

export const getCatalogTagsProductsRetrieveQueryKey = (id: number,) => {
    return [`/api/catalog/tags/${id}/products/`] as const;
    }

    
export const getCatalogTagsProductsRetrieveQueryOptions = <TData = Awaited<ReturnType<typeof catalogTagsProductsRetrieve>>, TError = unknown>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof catalogTagsProductsRetrieve>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getCatalogTagsProductsRetrieveQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof catalogTagsProductsRetrieve>>> = ({ signal }) => catalogTagsProductsRetrieve(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof catalogTagsProductsRetrieve>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type CatalogTagsProductsRetrieveQueryResult = NonNullable<Awaited<ReturnType<typeof catalogTagsProductsRetrieve>>>
export type CatalogTagsProductsRetrieveQueryError = unknown


export function useCatalogTagsProductsRetrieve<TData = Awaited<ReturnType<typeof catalogTagsProductsRetrieve>>, TError = unknown>(
 id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof catalogTagsProductsRetrieve>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof catalogTagsProductsRetrieve>>,
          TError,
          Awaited<ReturnType<typeof catalogTagsProductsRetrieve>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useCatalogTagsProductsRetrieve<TData = Awaited<ReturnType<typeof catalogTagsProductsRetrieve>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof catalogTagsProductsRetrieve>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof catalogTagsProductsRetrieve>>,
          TError,
          Awaited<ReturnType<typeof catalogTagsProductsRetrieve>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useCatalogTagsProductsRetrieve<TData = Awaited<ReturnType<typeof catalogTagsProductsRetrieve>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof catalogTagsProductsRetrieve>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useCatalogTagsProductsRetrieve<TData = Awaited<ReturnType<typeof catalogTagsProductsRetrieve>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof catalogTagsProductsRetrieve>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getCatalogTagsProductsRetrieveQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



